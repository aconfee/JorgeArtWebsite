{"version":3,"sources":["about/about.controller.js","app.js","home/home.controller.js","projectPage/projectPage.controller.js","common/services/projectsGallery.service.js","common/services/projectsService.js","common/directives/coverImage/coverImage.directive.js","common/directives/embededVideo/embededVideo.directive.js","common/directives/imageGallery/imageGallery.directive.js","common/directives/imageLightbox/imageLightbox.directive.js","common/directives/navigationBar/navigationBar.directive.js","common/directives/pageBreak/underline.directive.js","common/directives/textBlock/textBlock.directive.js"],"names":["aboutController","$scope","viewModel","this","myVariable","config","$routeProvider","$locationProvider","when","templateUrl","controller","controllerAs","otherwise","redirectTo","html5Mode","angular","module","$inject","homeController","$window","$location","$sce","ProjectsGalleryService","currentProjectsCategoryFilter","search","category","showVideo","undefined","projects","GetProjects","element","bind","$apply","videoLink","trustAsResourceUrl","projectPageController","$routeParams","ProjectsService","scrollTo","projectId","projectid","GetProjectPage","pageData","blogItems","service","smallScreenMax","mediumScreenMax","allProjectsFilter","filmProjectsFilter","artProjectsFilter","console","error","projectsDto","id","name","image","aspect","filteredProjectsList","FilterProjectsByCategory","MapProjectsDtoToVm","filteredProjects","i","length","push","GetRowSize","rowSize","innerWidth","Array","isArray","projectRows","rows","projectsIndex","y","x","$http","callback","get","then","response","status","MapProjectDataToVm","data","videos","source","textBlocks","coverImages","galleries","pageBreaks","sort","a","b","position","coverImage","restrict","scope","content","directive","embededVideo","embededUrl","imageGallery","selectedImage","imageGalleryController","ctrl","lightboxImage","GalleryThumbClick","log","imageThumbs","FormatImageList","GetNumberOfColumns","numCols","images","columns","numColumns","Math","ceil","imagesIndex","imageLightbox","navigationBar","underlinePageBreak","textBlock"],"mappings":"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","file":"dist.min.js","sourcesContent":["angular\n  .module('PortfolioSPAModule')\n  .controller('aboutController', aboutController);\n\naboutController.$inject = ['$scope'];\nfunction aboutController($scope){\n  var viewModel = this;\n\n  viewModel.myVariable = \"I'm pretty cool, I guess.\";\n}\n","/*\n* Angular application.\n*/\n\n(function(){\n\n  // Define the app module and it's dependencies.\n  angular.module('PortfolioSPAModule', ['ngRoute']);\n\n  // Create a config for our app -- configure our routes.\n  function config ($routeProvider, $locationProvider){\n    $routeProvider\n      .when('/', {\n        templateUrl: 'home/home.view.html',\n        controller: 'homeController',\n        controllerAs: 'viewModel'\n      })\n      .when('/about', {\n        templateUrl: 'about/about.view.html',\n        controller: 'aboutController',\n        controllerAs: 'viewModel'\n      })\n      .when('/projects/:projectid', {\n        templateUrl: 'projectPage/projectPage.view.html',\n        controller: 'projectPageController',\n        controllerAs: 'viewModel'\n      })\n      .otherwise({redirectTo: '/'});\n\n    // Pretty up URLs. Base defined in index.html.\n    $locationProvider.html5Mode(true);\n  }\n\n  // Add the config to our app.\n  angular\n    .module('PortfolioSPAModule')\n    .config(['$routeProvider', '$locationProvider', config]);\n\n})();\n","// Using function scopes to prevent global scope variables.\n// God, I can't wait to use typescript.\n(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .controller('homeController', homeController);\n\n  homeController.$inject = ['$scope', '$window', '$location', '$sce', 'ProjectsGalleryService'];\n  function homeController($scope, $window, $location, $sce, ProjectsGalleryService){\n    var viewModel = this;\n    var currentProjectsCategoryFilter = $location.search().category; // Once per 'page load'\n\n    viewModel.showVideo = currentProjectsCategoryFilter === undefined; // Promo on 'all' page.\n\n    // TODO: Make the main gallery a directive and pass projectRows into it.\n    viewModel.projects = ProjectsGalleryService.GetProjects(currentProjectsCategoryFilter);\n\n    // Turn into a service to return screen width and height.\n    // This service should have a method to just get num of rows that should display.\n    angular.element($window).bind('resize', function () {\n      // Possiblity to cache here... if necessary.\n      viewModel.projects = ProjectsGalleryService.GetProjects(currentProjectsCategoryFilter);\n      $scope.$apply(); // This is needed here... will occasionally update on its own.\n    });\n\n    viewModel.videoLink = $sce.trustAsResourceUrl(\"https://www.youtube.com/embed/CJ_GCPaKywg\");\n  }\n\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .controller('projectPageController', projectPageController);\n\n  projectPageController.$inject = ['$window', '$routeParams', 'ProjectsService'];\n  function projectPageController($window, $routeParams, ProjectsService){\n    var viewModel = this;\n\n    // Make sure we always start at the top of the page.\n    $window.scrollTo(0, 0);\n\n    // DEBUG TODO REMOVE\n    viewModel.projectId = $routeParams.projectid;\n\n    ProjectsService.GetProjectPage($routeParams.projectid, function(pageData){\n      viewModel.blogItems = pageData;\n    });\n  }\n\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .service('ProjectsGalleryService', ProjectsGalleryService);\n\n\n\n  ProjectsGalleryService.$inject = ['$window'];\n  function ProjectsGalleryService($window){\n    var service = this;\n\n    var smallScreenMax = 900;\n    var mediumScreenMax = 1500;\n\n    service.allProjectsFilter = undefined;\n    service.filmProjectsFilter = \"film\";\n    service.artProjectsFilter = \"art\";\n\n    ///\n    /// Call out to our API to get projects.\n    /// Filtr them by the appropriate category.\n    /// Organize them into rows according to screen size.\n    ///\n    service.GetProjects = function(category){\n\n      if(category !== service.allProjectsFilter &&\n        category !== service.filmProjectsFilter &&\n        category !== service.artProjectsFilter){\n          console.error(\"Invalid category provided: \" + category);\n          return;\n      }\n\n      // Get aspect ratio and store in db when uploaded.\n      // Replace with $http call.\n      // build another document of data consisting of specific project page.. all\n      // the blog components.\n      var projectsDto = [\n        {\n          \"id\": \"100\", // use this to navigate to specific project url\n          \"name\": \"NoMansSky\", // could be useful\n          \"image\": \"/images/NoMan1.jpg\",\n          \"aspect\": 0.665,\n          \"category\": \"film\"\n        },\n        {\n          \"id\": \"101\",\n          \"name\": \"NoMansSky2\",\n          \"image\": \"/images/NoMan2.jpg\",\n          \"aspect\": 1.78,\n          \"category\": \"art\"\n        },\n        {\n          \"id\": \"102\",\n          \"name\": \"NoMansSky3\",\n          \"image\": \"/images/NoMan3.jpg\",\n          \"aspect\": 1.77,\n          \"category\": \"art\"\n        },\n        {\n          \"id\": \"103\",\n          \"name\": \"NoMansSky4\",\n          \"image\": \"/images/NoMan4.jpg\",\n          \"aspect\": 1.77,\n          \"category\": \"art\"\n        },\n        {\n          \"id\": \"104\",\n          \"name\": \"NoMansSky5\",\n          \"image\": \"/images/NoMan5.jpeg\",\n          \"aspect\": 1.777,\n          \"category\": \"art\"\n        },\n        {\n          \"id\": \"105\",\n          \"name\": \"NoMansSky6\",\n          \"image\": \"/images/NoMan6.jpg\",\n          \"aspect\": 1.77,\n          \"category\": \"film\"\n        }\n      ];\n\n      var filteredProjectsList = FilterProjectsByCategory(projectsDto, category);\n      return service.MapProjectsDtoToVm(filteredProjectsList);\n    };\n\n    ///\n    /// Filter the projects by the provided category.\n    ///\n    var FilterProjectsByCategory = function(projects, category){\n      var filteredProjects = [];\n\n      if(category === service.allProjectsFilter){\n        return projects;\n      }\n\n      for(var i = 0; i < projects.length; i++){\n        // If the project category matches, add it to our results.\n        if(projects[i].category === category){\n          filteredProjects.push(projects[i]);\n        }\n      }\n\n      return filteredProjects;\n    };\n\n    ///\n    /// Get the number of projects we want to show in a row based on how\n    /// big the screen is.\n    ///\n    var GetRowSize = function(){\n      var rowSize = 1;\n\n      if($window.innerWidth > smallScreenMax){\n        rowSize = 2;\n      }\n\n      if($window.innerWidth > mediumScreenMax){\n        rowSize = 3;\n      }\n\n      return rowSize;\n    };\n\n    ///\n    /// Take an array of projects and map them to a 2D array of relevent\n    /// project info to be used by the view.\n    ///\n    service.MapProjectsDtoToVm = function(projects){\n      if(projects === undefined){\n        console.error(\"projects is undefined.\");\n        return;\n      }\n\n      if(projects.length === 0){\n        console.error(\"No projects in the projects array.\");\n        return;\n      }\n\n      if(Array.isArray(projects) === false){\n        console.error(\"Array of projects not provided.\");\n        return;\n      }\n\n      var rowSize = GetRowSize();\n      var projectRows = [];\n      var rows = projects.length / rowSize;\n\n      if(rows === 0) rows = 1;\n\n      var projectsIndex = 0;\n      for (var y = 0; y < rows; y++) {\n        projectRows.push([]);\n\n        for(var x = 0; x < rowSize; x++, projectsIndex++){\n          // Break if no projects remaining.\n          if(projectsIndex === projects.length) break;\n\n          projectRows[y].push(projects[ projectsIndex ]);\n        }\n      }\n\n      return projectRows;\n    };\n\n  }\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .service('ProjectsService', ProjectsService);\n\n  ProjectsService.$inject = ['$sce', '$http'];\n  function ProjectsService($sce, $http){\n    var service = this;\n\n    ///\n    /// Get a project page by its id.\n    ///\n    service.GetProjectPage = function(projectId, callback){\n\n      $http.get('/api/projects/' + projectId).then(\n        function(response){\n          if(response.status === 200){\n            callback(MapProjectDataToVm(response.data));\n          }\n        },\n        function(response){\n          console.error(\"Something went wrong getting project page \" + projectId);\n          // TODO: Redirect to 404 not found.\n      });\n    };\n\n    ///\n    /// Map the data returned by a project page to its view model.\n    ///\n    var MapProjectDataToVm = function(data){\n      var blogItems = [];\n\n      var i = 0;\n      for(i = 0; i < data.videos.length; i++){\n        // Trust the link provided and add.\n        data.videos[i].source = $sce.trustAsResourceUrl(data.videos[i].source);\n        blogItems.push(data.videos[i]);\n      }\n\n      for(i = 0; i < data.textBlocks.length; i++){\n        blogItems.push(data.textBlocks[i]);\n      }\n\n      for(i = 0; i < data.coverImages.length; i++){\n        blogItems.push(data.coverImages[i]);\n      }\n\n      for(i = 0; i < data.galleries.length; i++){\n        blogItems.push(data.galleries[i]);\n      }\n\n      for(i = 0; i < data.pageBreaks.length; i++){\n        blogItems.push(data.pageBreaks[i]);\n      }\n\n      // Sort the list by position\n      blogItems.sort(function(a, b) {\n        return a.position > b.position;\n      });\n\n      return blogItems;\n    };\n  }\n\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('coverImage', coverImage);\n\n  function coverImage(){\n    return{\n      restrict:'EA',\n      scope:{\n        content: '=content'\n      },\n      templateUrl: '/common/directives/coverImage/coverImage.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('embededVideo', embededVideo);\n\n  function embededVideo(){\n    return{\n      restrict:'EA',\n      scope:{\n        embededUrl: '=embededUrl'\n      },\n      templateUrl: '/common/directives/embededVideo/embededVideo.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .controller('imageGalleryController', imageGalleryController)\n    .directive('imageGallery', imageGallery);\n\n  function imageGallery(){\n    return{\n      restrict:'EA',\n      scope:{\n        content: '=content',\n        selectedImage: '=selectedImage'\n      },\n      templateUrl: '/common/directives/imageGallery/imageGallery.directive.html',\n      controller: imageGalleryController,\n      controllerAs: 'ctrl'\n    };\n  }\n\n  ///\n  /// Define a controller for this image gallery to use.\n  ///\n  imageGalleryController.$inject = ['$scope', '$window'];\n  function imageGalleryController($scope, $window){\n    var ctrl = this;\n    var tinyScreenMax = 600;\n    var smallScreenMax = 650;\n    var mediumScreenMax = 1000;\n    // Never really want more than 4 columns or balance starts to look shit.\n    ctrl.lightboxImage = \"\";\n\n    ctrl.GalleryThumbClick = function(image){\n      // Set modal image\n      $scope.selectedImage = image;\n    };\n\n    angular.element($window).bind('resize', function () {\n      console.log(\"resizing\");\n      // Possiblity to cache here... if necessary.\n      ctrl.imageThumbs = FormatImageList($scope.content); // format images with new number of columns based on screen size.\n      $scope.$apply(); // This is needed here... will occasionally update on its own.\n    });\n\n    var GetNumberOfColumns = function(){\n      var numCols = 2;\n\n      //if($window.innerWidth > tinyScreenMax){\n        numCols = 2;\n      //}\n      if($window.innerWidth > smallScreenMax){\n        numCols = 3;\n      }\n      if($window.innerWidth > mediumScreenMax){\n        numCols = 4;\n      }\n\n      return numCols;\n    };\n\n    var FormatImageList = function(images){\n      var columns = [];\n      var numColumns = GetNumberOfColumns();\n      var rows = Math.ceil(images.length / numColumns);\n\n      var imagesIndex = 0;\n      for (var y = 0; y < rows; y++) {\n        for(var x = 0; x < numColumns; x++, imagesIndex++){\n          if(columns[x] === undefined){\n            columns.push([]);\n          }\n\n          // Break if no projects remaining.\n          if(imagesIndex === images.length) break;\n\n          columns[x].push(images[ imagesIndex ]);\n        }\n      }\n\n      return columns;\n    };\n\n    ctrl.imageThumbs = FormatImageList($scope.content);\n  }\n\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('imageLightbox', imageLightbox);\n\n  function imageLightbox(){\n    return{\n      restrict:'EA',\n      scope:{\n        content: '=content'\n      },\n      templateUrl: '/common/directives/imageLightbox/imageLightbox.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('navigationBar', navigationBar);\n\n  function navigationBar(){\n    return{\n      restrict:'EA',\n      templateUrl: '/common/directives/navigationBar/navigationBar.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('underlinePageBreak', underlinePageBreak);\n\n  function underlinePageBreak(){\n    return{\n      restrict:'EA',\n      templateUrl: '/common/directives/pageBreak/underline.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('textBlock', textBlock);\n\n  function textBlock(){\n    return{\n      restrict:'EA',\n      scope:{\n        content: '=content'\n      },\n      templateUrl: '/common/directives/textBlock/textBlock.directive.html'\n    };\n  }\n})();\n"],"sourceRoot":"/source/"}