{"version":3,"sources":["about/about.controller.js","login/login.controller.js","app.js","projectPage/projectPage.controller.js","home/home.controller.js","common/services/authentication.service.js","common/services/dataMappingService.js","common/services/projectsService.js","common/services/responsiveService.js","common/services/upload.service.js","admin/dashboard/dashboard.controller.js","admin/newProject/newProject.controller.js","common/directives/adminHeader/adminHeader.directive.js","common/directives/coverImage/coverImage.directive.js","common/directives/embededVideo/embededVideo.directive.js","common/directives/fileModel/fileModel.directive.js","common/directives/imageGallery/imageGallery.directive.js","common/directives/imageLightbox/imageLightbox.directive.js","common/directives/navigationBar/navigationBar.directive.js","common/directives/pageBreak/underline.directive.js","common/directives/textBlock/textBlock.directive.js"],"names":["aboutController","$scope","viewModel","this","myVariable","loginCtrl","$location","AuthentictionService","pageHeader","title","credentials","username","password","returnPage","onSubmit","formError","doLogin","login","error","err","message","then","path","config","$routeProvider","$locationProvider","when","templateUrl","controller","controllerAs","otherwise","redirectTo","html5Mode","angular","module","$inject","projectPageController","$window","$routeParams","ProjectsService","project","projectId","projectid","scrollTo","GetProject","GetProjectPage","pageData","blogItems","nextProject","GetAllProjects","projects","i","length","_id","previousProject","homeController","$sce","categoryFilter","search","category","console","log","videoLink","trustAsResourceUrl","showVideo","undefined","GetProjectsHomePage","projectsVm","$http","saveToken","token","localStorage","getToken","user","post","success","data","logout","removeItem","isLoggedIn","payload","JSON","parse","atob","split","exp","Date","now","service","DataMappingService","ResponsiveService","MapProjectDataToProjectPageVm","pageItems","sort","a","b","position","type","content","MapProjectsDataToHomePageVm","Array","isArray","rowSize","GetHomePageRowSize","projectRows","rows","projectsIndex","y","push","x","projectCoverImageAspectRatio","allProjectsFilter","designProjectsFilter","animationProjectsFilter","illustrationProjectsFilter","artworkProjectsFilter","miscProjectsFilter","callback","get","response","status","filteredProjectsList","FilterProjectsByCategory","mapped","filteredProjects","smallScreenMax","mediumScreenMax","innerWidth","UploadService","uploadImage","fileData","successCB","errorCB","fd","FormData","append","transformRequest","identity","headers","Content-Type","Authorization","dashboardController","projectToDelete","markForDelete","index","deleteProject","newProjectController","isNew","absUrl","indexOf","formMessageHeader","created","newProject","createProject","getAspectRatio","editProject","put","uploadProjectCoverImage","projectCoverImage","filepath","uploadBlogItemCoverImage","uploadToGallery","contentArray","addNewPageItem","removePageItem","splice","resetProject","elementQuery","screenImage","$","theImage","Image","src","attr","aspect","width","height","adminHeader","restrict","scope","adminHeaderController","directive","coverImage","embededVideo","embededUrl","fileModel","$parse","link","element","attrs","model","modelSetter","assign","bind","$apply","files","imageGallery","selectedImage","imageGalleryController","ctrl","lightboxImage","GalleryThumbClick","image","imageThumbs","FormatImageList","GetNumberOfColumns","numCols","images","columns","numColumns","Math","ceil","imagesIndex","imageLightbox","imageLightboxController","imageWidth","document","ready","on","find","css","navigationBar","navigationBarController","isActive","underlinePageBreak","textBlock"],"mappings":"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","file":"dist.min.js","sourcesContent":["angular\n  .module('PortfolioSPAModule')\n  .controller('aboutController', aboutController);\n\naboutController.$inject = ['$scope'];\nfunction aboutController($scope){\n  var viewModel = this;\n\n  viewModel.myVariable = \"I'm pretty cool, I guess.\";\n}\n","angular\n  .module('PortfolioSPAModule')\n  .controller('loginCtrl', loginCtrl);\n\nloginCtrl.$inject = ['$location', 'AuthentictionService'];\nfunction loginCtrl($location, AuthentictionService){\n  var viewModel = this;\n\n  viewModel.pageHeader = {\n    title: 'Admin Sign In'\n  };\n\n  viewModel.credentials = {\n    username: \"\",\n    password: \"\"\n  };\n\n  viewModel.returnPage = '/admin'; // Go to admin page once logged in.\n  viewModel.onSubmit = function(){\n    viewModel.formError = \"\";\n    if(!viewModel.credentials.username || !viewModel.credentials.password){\n      viewModel.formError = \"All fields required.\";\n      return false;\n    }\n    else{\n      viewModel.doLogin();\n    }\n  };\n\n  viewModel.doLogin = function(){\n    viewModel.formError = \"\";\n    AuthentictionService\n      .login(viewModel.credentials)\n      .error(function(err){\n        viewModel.formError = err.message;\n      })\n      .then(function(){\n        //$location.search('page', null); no need to get query param for return page.\n        $location.path(viewModel.returnPage);\n      });\n  };\n}\n","/*\n* Angular application.\n*/\n\n(function(){\n\n  // Define the app module and it's dependencies.\n  angular.module('PortfolioSPAModule', ['ngRoute']);\n\n  // Create a config for our app -- configure our routes.\n  function config ($routeProvider, $locationProvider){\n    $routeProvider\n      .when('/', {\n        templateUrl: 'home/home.view.html',\n        controller: 'homeController',\n        controllerAs: 'viewModel'\n      })\n      .when('/about', {\n        templateUrl: 'about/about.view.html',\n        controller: 'aboutController',\n        controllerAs: 'viewModel'\n      })\n      .when('/projects/:projectid', {\n        templateUrl: 'projectPage/projectPage.view.html',\n        controller: 'projectPageController',\n        controllerAs: 'viewModel'\n      })\n      .when('/login', {\n        templateUrl: '/login/login.view.html',\n        controller: 'loginCtrl',\n        controllerAs: 'viewModel'\n      })\n      .when('/admin', {\n        templateUrl: '/admin/dashboard/dashboard.view.html',\n        controller: 'dashboardController',\n        controllerAs: 'viewModel'\n      })\n      .when('/admin/edit/:projectid', {\n        templateUrl: '/admin/newProject/newProject.view.html',\n        controller: 'newProjectController',\n        controllerAs: 'viewModel'\n      })\n      .when('/admin/newProject', {\n        templateUrl: '/admin/newProject/newProject.view.html',\n        controller: 'newProjectController',\n        controllerAs: 'viewModel'\n      })\n      .otherwise({redirectTo: '/'});\n\n    // Pretty up URLs. Base defined in index.html.\n    $locationProvider.html5Mode(true);\n  }\n\n  // Add the config to our app.\n  angular\n    .module('PortfolioSPAModule')\n    .config(['$routeProvider', '$locationProvider', config]);\n\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .controller('projectPageController', projectPageController);\n\n  projectPageController.$inject = ['$window', '$routeParams', '$location', 'ProjectsService'];\n  function projectPageController($window, $routeParams, $location, ProjectsService){\n    var viewModel = this;\n    viewModel.project = {};\n\n    viewModel.projectId = $routeParams.projectid;\n\n    // Make sure we always start at the top of the page.\n    $window.scrollTo(0, 0);\n\n    ProjectsService.GetProject(viewModel.projectId, function(project){\n      viewModel.project = project;\n    });\n\n    ProjectsService.GetProjectPage($routeParams.projectid, function(pageData){\n      viewModel.blogItems = pageData;\n    });\n\n    viewModel.nextProject = function(){\n      ProjectsService.GetAllProjects(function(projects){\n        var i = 0;\n        for(; i < projects.length; i++){\n          if(projects[i]._id === viewModel.project._id){\n            break;\n          }\n        }\n\n        if(i === projects.length - 1){\n          i = -1;\n        }\n\n        $location.path('/projects/' + projects[i + 1]._id);\n      });\n    };\n\n    viewModel.previousProject = function(){\n      ProjectsService.GetAllProjects(function(projects){\n        var i = 0;\n        for(; i < projects.length; i++){\n          if(projects[i]._id === viewModel.project._id){\n            break;\n          }\n        }\n\n        if(i === 0){\n          i = projects.length;\n        }\n\n        $location.path('/projects/' + projects[i - 1]._id);\n      });\n    };\n  }\n\n})();\n","// Using function scopes to prevent global scope variables.\n// God, I can't wait to use typescript.\n(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .controller('homeController', homeController);\n\n  homeController.$inject = ['$scope', '$window', '$location', '$sce', 'ProjectsService'];\n  function homeController($scope, $window, $location, $sce, ProjectsService){\n    var viewModel = this;\n    var categoryFilter = $location.search().category; // Once per 'page load'\n\n    console.log(\"entering home page controller\");\n\n    viewModel.videoLink = $sce.trustAsResourceUrl(\"https://www.youtube.com/embed/CJ_GCPaKywg\");\n    viewModel.showVideo = categoryFilter === undefined; // Promo on 'all' page.\n\n    ///\n    /// Request the projects to disply on the home page.\n    ///\n    ProjectsService.GetProjectsHomePage(categoryFilter, function(projectsVm){\n      viewModel.projects = projectsVm;\n    });\n\n    ///\n    /// Re-get the projects if page is resized (getting projects will rebuild the rows\n    /// according to screen size).\n    /// TODO: Only get projects when resizing is done so we're not making a million calls.\n    ///\n    /*\n    angular.element($window).bind('resize', function () {\n      // Possiblity to cache here... if necessary.\n      ProjectsService.GetProjectsHomePage(categoryFilter, function(projectsVm){\n        viewModel.projects = projectsVm;\n        //$scope.$apply(); // Not needed... two way bind automatically digests.\n      });\n    });\n    */\n  }\n\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .service('AuthentictionService', AuthentictionService);\n\n    AuthentictionService.$inject = ['$window', '$http'];\n    function AuthentictionService($window, $http){\n      var saveToken = function(token){\n        $window.localStorage['admin-token'] = token;\n      };\n\n      var getToken = function(){\n        return $window.localStorage['admin-token'];\n      };\n\n      var login = function(user){\n        return $http.post('/api/login', user).success(function(data){\n          saveToken(data.token);\n        });\n      };\n\n      var logout = function(){\n        $window.localStorage.removeItem('admin-token');\n      };\n\n      var isLoggedIn = function(){\n        var token = getToken();\n\n        if(token){\n          var payload = JSON.parse($window.atob(token.split('.')[1]));\n\n          return payload.exp > Date.now() / 1000;\n        }\n        else{\n          return false;\n        }\n      };\n\n      var currentUser = function(){\n        if(isLoggedIn()){\n          var token = getToken();\n          var payload = JSON.parse($window.atob(token.split('.')[1]));\n          return {\n            username: payload.username\n          };\n        }\n      };\n\n      return {\n        login: login,\n        logout: logout,\n        isLoggedIn: isLoggedIn,\n        saveToken: saveToken,\n        getToken: getToken\n      };\n    }\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .service('DataMappingService', DataMappingService);\n\n  DataMappingService.$inject = ['$sce', 'ResponsiveService'];\n  function DataMappingService($sce, ResponsiveService){\n    var service = this;\n\n    ///\n    /// Map the data returned by a project page to its view model.\n    ///\n     service.MapProjectDataToProjectPageVm = function(data){\n      var blogItems = data.pageItems;\n\n      // Sort the list by position\n      blogItems.sort(function(a, b) {\n        return a.position > b.position;\n      });\n\n      // Trust all video links as secure.\n      for(var i = 0; i < data.pageItems.length; i++){\n        if(data.pageItems[i].type === \"video\"){\n          data.pageItems[i].content = $sce.trustAsResourceUrl(data.pageItems[i].content);\n        }\n      }\n\n      return blogItems;\n    };\n\n    ///\n    /// Take an array of projects and map them to a 2D array of relevent\n    /// project info to be used by the view.\n    ///\n    service.MapProjectsDataToHomePageVm = function(projects){\n      console.log(\"mapping projects home\");\n      if(projects === undefined){\n        console.error(\"projects is undefined.\");\n        return;\n      }\n\n      if(projects.length === 0){\n        console.error(\"No projects in the projects array.\");\n        return;\n      }\n\n      if(Array.isArray(projects) === false){\n        console.error(\"Array of projects not provided.\");\n        return;\n      }\n\n      projects.sort(function(a, b) {\n        return a.position > b.position;\n      });\n\n      var rowSize = ResponsiveService.GetHomePageRowSize();\n      var projectRows = [];\n      var rows = projects.length / rowSize;\n\n      if(rows === 0) rows = 1;\n\n      var projectsIndex = 0;\n      for (var y = 0; y < rows; y++) {\n        projectRows.push([]);\n\n        for(var x = 0; x < rowSize; x++, projectsIndex++){\n          // Break if no projects remaining.\n          if(projectsIndex === projects.length) break;\n\n          projectRows[y].push(projects[ projectsIndex ]);\n        }\n\n        // If only one item in row, full size.\n        if(projectRows[y].length === 1){\n          projectRows[y][0].projectCoverImageAspectRatio = 1;\n        }\n      }\n\n      return projectRows;\n    };\n\n  }\n\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .service('ProjectsService', ProjectsService);\n\n  ProjectsService.$inject = ['$sce', '$http', 'DataMappingService'];\n  function ProjectsService($sce, $http, DataMappingService){\n    var service = this;\n\n    service.allProjectsFilter = undefined;\n    service.designProjectsFilter = \"design\";\n    service.animationProjectsFilter = \"animation\";\n    service.illustrationProjectsFilter = \"illustration\";\n    service.artworkProjectsFilter = \"artwork\";\n    service.miscProjectsFilter = \"misc\";\n\n    ///\n    /// Get all the projects raw data\n    ///\n    service.GetAllProjects = function(callback){\n      console.log(\"getting all projects\");\n      $http.get('/api/projects/').then(\n        function(response){\n          if(response.status === 200){\n\n            response.data.sort(function(a, b) {\n              return a.position > b.position;\n            });\n\n            callback(response.data);\n          }\n        },\n        function(response){\n          console.error(\"Something went wrong getting all projects.\");\n          // TODO: Redirect to 404 not found.\n      });\n    };\n\n    ///\n    /// Get a project by its id.\n    ///\n    service.GetProject = function(projectId, callback){\n\n      $http.get('/api/projects/' + projectId).then(\n        function(response){\n          if(response.status === 200){\n            callback(response.data);\n          }\n        },\n        function(response){\n          console.error(\"Something went wrong getting project page \" + projectId);\n          // TODO: Redirect to 404 not found.\n      });\n    };\n\n    ///\n    /// Get a project page by its id.\n    ///\n    service.GetProjectPage = function(projectId, callback){\n\n      $http.get('/api/projects/' + projectId).then(\n        function(response){\n          if(response.status === 200){\n            callback(DataMappingService.MapProjectDataToProjectPageVm(response.data));\n          }\n        },\n        function(response){\n          console.error(\"Something went wrong getting project page \" + projectId);\n          // TODO: Redirect to 404 not found.\n      });\n    };\n\n    ///\n    /// Get all projects as they are needed on the home page.\n    ///\n    service.GetProjectsHomePage = function(category, callback){\n      console.log(\"getting projects home page from service\");\n      $http.get('/api/projects/').then(\n        function(response){\n          if(response.status === 200){\n            var filteredProjectsList = FilterProjectsByCategory(response.data, category);\n            var mapped =  DataMappingService.MapProjectsDataToHomePageVm(filteredProjectsList);\n\n            callback(mapped);\n          }\n        },\n        function(response){\n          console.log(\"Something went wrong while getting all projects.\");\n      });\n    };\n\n    ///\n    /// Filter the projects by the provided category.\n    ///\n    var FilterProjectsByCategory = function(projects, category){\n      var filteredProjects = [];\n\n      if(category === service.allProjectsFilter){\n        return projects;\n      }\n\n      for(var i = 0; i < projects.length; i++){\n        // If the project category matches, add it to our results.\n        if(projects[i].category === category){\n          filteredProjects.push(projects[i]);\n        }\n      }\n\n      return filteredProjects;\n    };\n  }\n\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .service('ResponsiveService', ResponsiveService);\n\n  ResponsiveService.$inject = ['$window'];\n  function ResponsiveService($window){\n    var service = this;\n\n    var smallScreenMax = 900;\n    var mediumScreenMax = 1500;\n\n    ///\n    /// Get the number of projects we want to show in a row based on how\n    /// big the screen is.\n    ///\n    service.GetHomePageRowSize = function(){\n      console.log(\"getting home page row size\");\n      var rowSize = 1;\n\n      if($window.innerWidth > smallScreenMax){\n        rowSize = 2;\n      }\n\n      if($window.innerWidth > mediumScreenMax){\n        rowSize = 3;\n      }\n\n      return rowSize;\n    };\n  }\n\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .service('UploadService', UploadService);\n\n    UploadService.$inject = ['$http', 'AuthentictionService'];\n    function UploadService($http, AuthentictionService){\n      service = this;\n\n      service.uploadImage = function(fileData, successCB, errorCB){\n\n        var fd = new FormData();\n        fd.append('file', fileData);\n        $http.post(\"/api/upload\", fd, {\n            transformRequest: angular.identity,\n            headers: {\n              'Content-Type': undefined,\n              Authorization: 'Bearer ' + AuthentictionService.getToken()\n            }\n        })\n        .success(function(response){\n          successCB(response);\n        })\n        .error(function(response){\n          errorCB(response);\n        });\n      };\n\n    }\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .controller('dashboardController', dashboardController);\n\n  dashboardController.$inject = ['$scope', '$location', '$http', 'ProjectsService', 'AuthentictionService'];\n  function dashboardController($scope, $location, $http, ProjectsService, AuthentictionService){\n\n    var viewModel = this;\n    viewModel.projects = [];\n    viewModel.projectToDelete = {};\n\n    // Immediatelly check if a user is logged in, otherwise leave.\n    if(AuthentictionService.isLoggedIn() === false){\n      $location.path('/login');\n    }\n\n    ///\n    /// Request the projects to disply on the home page.\n    ///\n    ProjectsService.GetAllProjects(function(projects){\n      viewModel.projects = projects;\n    });\n\n    viewModel.markForDelete = function(index){\n      viewModel.projectToDelete = viewModel.projects[index];\n    };\n\n    viewModel.deleteProject = function(){\n      $http.delete('/api/projects/' + viewModel.projectToDelete._id, {\n        headers: {\n          Authorization: 'Bearer ' + AuthentictionService.getToken()\n        }\n      }).then(\n        function(response){\n\n          // Refresh projects list.\n          ProjectsService.GetAllProjects(function(projects){\n            viewModel.projects = projects;\n          });\n        },\n        function(response){\n          console.err(\"Something went wrong deleting a profile.\");\n      });\n    };\n  }\n\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .controller('newProjectController', newProjectController);\n\n  newProjectController.$inject = ['$scope', '$location', '$http', '$routeParams', 'AuthentictionService', 'UploadService' ,'ProjectsService'];\n  function newProjectController($scope, $location, $http, $routeParams, AuthentictionService, UploadService, ProjectsService){\n    var viewModel = this;\n\n    // Immediatelly check if a user is logged in, otherwise leave.\n    if(AuthentictionService.isLoggedIn() === false){\n      $location.path('/login');\n    }\n\n    viewModel.isNew = false;\n    if($location.absUrl().indexOf('newProject') > -1){\n      viewModel.isNew = true;\n    }\n\n    viewModel.formMessageHeader = \"\";\n    viewModel.formError = \"\";\n    viewModel.created = false;\n    viewModel.newProject = {};\n    viewModel.fileData = {};\n\n    ///\n    /// Initialize variables if we're editing\n    ///\n    if(viewModel.isNew === false){\n      var projectid = $routeParams.projectid;\n      ProjectsService.GetProject(projectid, function(project){\n        viewModel.newProject = project;\n      });\n    }\n\n    ///\n    /// Add the project to our db.\n    ///\n    viewModel.createProject = function(){\n\n      viewModel.newProject.projectCoverImageAspectRatio = getAspectRatio(\"#projectCoverImage\");\n\n      $http.post('/api/projects', viewModel.newProject, {\n        headers: {\n          Authorization: 'Bearer ' + AuthentictionService.getToken()\n        }\n      }).then(\n        function(response){\n          viewModel.formMessageHeader = \"Success!\";\n          viewModel.formError = \"Project created.\";\n          viewModel.created = true;\n          $location.path('/admin');\n        },\n        function(response){\n          viewModel.formMessageHeader = \"Oops!\";\n          viewModel.formError = \"Something went wrong trying to create project. \" + response.data;\n          viewModel.created = false;\n        }\n      );\n    };\n\n    viewModel.editProject = function(){\n      var projectid = $routeParams.projectid;\n\n      viewModel.newProject.projectCoverImageAspectRatio = getAspectRatio('#projectCoverImage');\n\n      $http.put('/api/projects/' + projectid, viewModel.newProject, {\n        headers: {\n          Authorization: 'Bearer ' + AuthentictionService.getToken()\n        }\n      }).then(\n        function(response){\n          viewModel.formMessageHeader = \"Success!\";\n          viewModel.formError = \"Project updated.\";\n          viewModel.created = true;\n          $location.path('/admin');\n        },\n        function(response){\n          viewModel.formMessageHeader = \"Oops!\";\n          viewModel.formError = \"Something went wrong trying to save this project. \" + response.data;\n          viewModel.created = false;\n      });\n    };\n\n    viewModel.uploadProjectCoverImage = function(){\n      UploadService.uploadImage(viewModel.newProject.projectCoverImage,\n        function(response){\n          viewModel.newProject.projectCoverImage = response.filepath;\n        },\n        function(response){\n          console.log(\"something went wrong trying to upload file.\");\n      });\n    };\n\n    viewModel.uploadBlogItemCoverImage = function(index){\n      UploadService.uploadImage(viewModel.newProject.pageItems[index].content,\n        function(response){\n          viewModel.newProject.pageItems[index].content = response.filepath;\n        },\n        function(response){\n          console.log(\"something went wrong trying to upload file.\");\n      });\n    };\n\n    viewModel.uploadToGallery = function(index){\n      UploadService.uploadImage(viewModel.fileData,\n        function(response){\n          viewModel.newProject.pageItems[index].contentArray.push(response.filepath);\n        },\n        function(response){\n          console.log(\"something went wrong trying to upload file.\");\n      });\n    };\n\n    viewModel.addNewPageItem = function(){\n      if(viewModel.newProject.pageItems === undefined){\n        viewModel.newProject.pageItems = [];\n      }\n\n      viewModel.newProject.pageItems.push({\n        position: 0,\n        content: \"\",\n        contentArray: []\n      });\n    };\n\n    viewModel.removePageItem = function(index){\n      viewModel.newProject.pageItems.splice(index, 1);\n    };\n\n    viewModel.resetProject = function(){\n      viewModel.newProject = {};\n    };\n\n    var getAspectRatio = function(elementQuery){\n      var screenImage = $(\"#projectCoverImage\");\n      var theImage = new Image();\n      theImage.src = screenImage.attr(\"src\");\n\n      var aspect = theImage.width / theImage.height;\n\n      return aspect;\n    };\n  }\n\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('adminHeader', adminHeader);\n\n  function adminHeader(){\n    return{\n      restrict:'EA',\n      templateUrl: '/common/directives/adminHeader/adminHeader.directive.html',\n      scope:{\n        title: '@title'\n      },\n      controller: adminHeaderController,\n      controllerAs: 'viewModel'\n    };\n  }\n\n  ///\n  /// Define a controller for this image gallery to use.\n  ///\n  adminHeaderController.$inject = ['$location', 'AuthentictionService'];\n  function adminHeaderController($location, AuthentictionService){\n    var viewModel = this;\n\n    viewModel.logout = function(){\n      AuthentictionService.logout();\n      $location.path('/');\n    };\n  }\n\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('coverImage', coverImage);\n\n  function coverImage(){\n    return{\n      restrict:'EA',\n      scope:{\n        content: '=content'\n      },\n      templateUrl: '/common/directives/coverImage/coverImage.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('embededVideo', embededVideo);\n\n  function embededVideo(){\n    return{\n      restrict:'EA',\n      scope:{\n        embededUrl: '=embededUrl'\n      },\n      templateUrl: '/common/directives/embededVideo/embededVideo.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('fileModel', ['$parse', fileModel]);\n\n  function fileModel($parse){\n    return{\n      restrict:'A',\n      link: function(scope, element, attrs){\n        var model = $parse(attrs.fileModel);\n        var modelSetter = model.assign;\n\n        element.bind('change', function(){\n          scope.$apply(function(){\n            modelSetter(scope, element[0].files[0]);\n          });\n        });\n      }\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .controller('imageGalleryController', imageGalleryController)\n    .directive('imageGallery', imageGallery);\n\n  function imageGallery(){\n    return{\n      restrict:'EA',\n      scope:{\n        content: '=content',\n        selectedImage: '=selectedImage'\n      },\n      templateUrl: '/common/directives/imageGallery/imageGallery.directive.html',\n      controller: imageGalleryController,\n      controllerAs: 'ctrl'\n    };\n  }\n\n  ///\n  /// Define a controller for this image gallery to use.\n  ///\n  imageGalleryController.$inject = ['$scope', '$window'];\n  function imageGalleryController($scope, $window){\n    var ctrl = this;\n    var tinyScreenMax = 600;\n    var smallScreenMax = 650;\n    var mediumScreenMax = 1000;\n    // Never really want more than 4 columns or balance starts to look shit.\n    ctrl.lightboxImage = \"\";\n\n    ctrl.GalleryThumbClick = function(image){\n      // Set modal image\n      $scope.selectedImage = image;\n    };\n\n    angular.element($window).bind('resize', function () {\n      console.log(\"resizing\");\n      // Possiblity to cache here... if necessary.\n      ctrl.imageThumbs = FormatImageList($scope.content); // format images with new number of columns based on screen size.\n      $scope.$apply(); // This is needed here... will occasionally update on its own.\n    });\n\n    var GetNumberOfColumns = function(){\n      var numCols = 2;\n\n      //if($window.innerWidth > tinyScreenMax){\n        numCols = 2;\n      //}\n      if($window.innerWidth > smallScreenMax){\n        numCols = 3;\n      }\n      if($window.innerWidth > mediumScreenMax){\n        numCols = 4;\n      }\n\n      return numCols;\n    };\n\n    var FormatImageList = function(images){\n      var columns = [];\n      var numColumns = GetNumberOfColumns();\n      var rows = Math.ceil(images.length / numColumns);\n\n      var imagesIndex = 0;\n      for (var y = 0; y < rows; y++) {\n        for(var x = 0; x < numColumns; x++, imagesIndex++){\n          if(columns[x] === undefined){\n            columns.push([]);\n          }\n\n          // Break if no projects remaining.\n          if(imagesIndex === images.length) break;\n\n          columns[x].push(images[ imagesIndex ]);\n        }\n      }\n\n      return columns;\n    };\n\n    ctrl.imageThumbs = FormatImageList($scope.content);\n  }\n\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('imageLightbox', imageLightbox);\n\n  function imageLightbox(){\n    return{\n      restrict:'EA',\n      scope:{\n        content: '=content'\n      },\n      templateUrl: '/common/directives/imageLightbox/imageLightbox.directive.html',\n      controller: imageLightboxController,\n      controllerAs: 'viewModel'\n    };\n  }\n\n  imageLightboxController.$inject = [];\n  function imageLightboxController(){\n    var ctrl = this;\n    ctrl.imageWidth = \"\";\n\n    $(document).ready(function(){\n\n      $('#lightbox').on('shown.bs.modal', function () {\n\n        var screenImage = $(\"#lightbox img\");\n        var theImage = new Image();\n        theImage.src = screenImage.attr(\"src\");\n        ctrl.imageWidth = theImage.width;\n\n        $(this).find(\".modal-dialog\").css(\"width\", ctrl.imageWidth);\n      });\n    });\n  }\n\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('navigationBar', navigationBar);\n\n  function navigationBar(){\n    return{\n      restrict:'EA',\n      templateUrl: '/common/directives/navigationBar/navigationBar.directive.html',\n      controller: navigationBarController,\n      controllerAs: 'ctrl'\n    };\n  }\n\n  navigationBarController.$inject = ['$location'];\n  function navigationBarController($location){\n    var ctrl = this;\n\n    ctrl.isActive = function(path){\n      if(path.length === 1){\n        // If checking if we're on homepage...\n        return $location.path() === '/' && $location.search().category === undefined;\n      }\n\n      return $location.absUrl().indexOf(path) != -1;\n    };\n  }\n\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('underlinePageBreak', underlinePageBreak);\n\n  function underlinePageBreak(){\n    return{\n      restrict:'EA',\n      templateUrl: '/common/directives/pageBreak/underline.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('textBlock', textBlock);\n\n  function textBlock(){\n    return{\n      restrict:'EA',\n      scope:{\n        content: '=content'\n      },\n      templateUrl: '/common/directives/textBlock/textBlock.directive.html'\n    };\n  }\n})();\n"],"sourceRoot":"/source/"}