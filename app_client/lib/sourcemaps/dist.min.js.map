{"version":3,"sources":["about/about.controller.js","admin/admin.controller.js","login/login.controller.js","app.js","home/home.controller.js","projectPage/projectPage.controller.js","common/services/authentication.service.js","common/services/dataMappingService.js","common/services/projectsService.js","common/services/responsiveService.js","common/directives/coverImage/coverImage.directive.js","common/directives/embededVideo/embededVideo.directive.js","common/directives/imageGallery/imageGallery.directive.js","common/directives/navigationBar/navigationBar.directive.js","common/directives/pageBreak/underline.directive.js","common/directives/textBlock/textBlock.directive.js","common/directives/imageLightbox/imageLightbox.directive.js"],"names":["aboutController","$scope","viewModel","this","myVariable","adminController","$location","$http","authentication","isLoggedIn","path","formError","createProject","post","lol","headers","Authorization","getToken","then","response","data","message","logout","loginCtrl","pageHeader","title","credentials","username","password","returnPage","onSubmit","doLogin","login","error","err","config","$routeProvider","$locationProvider","when","templateUrl","controller","controllerAs","otherwise","redirectTo","html5Mode","angular","module","$inject","homeController","$window","$sce","ProjectsService","categoryFilter","search","category","videoLink","trustAsResourceUrl","showVideo","undefined","GetProjectsHomePage","projectsVm","projects","element","bind","projectPageController","$routeParams","projectId","projectid","scrollTo","GetProjectPage","pageData","blogItems","saveToken","token","localStorage","user","success","removeItem","payload","JSON","parse","atob","split","exp","Date","now","service","DataMappingService","ResponsiveService","MapProjectDataToProjectPageVm","i","videos","length","source","push","textBlocks","coverImages","galleries","pageBreaks","sort","a","b","position","MapProjectsDataToHomePageVm","console","Array","isArray","rowSize","GetHomePageRowSize","projectRows","rows","projectsIndex","y","x","allProjectsFilter","filmProjectsFilter","artProjectsFilter","callback","get","status","filteredProjectsList","FilterProjectsByCategory","mapped","log","filteredProjects","smallScreenMax","mediumScreenMax","innerWidth","coverImage","restrict","scope","content","directive","embededVideo","embededUrl","imageGallery","selectedImage","imageGalleryController","ctrl","lightboxImage","GalleryThumbClick","image","imageThumbs","FormatImageList","$apply","GetNumberOfColumns","numCols","images","columns","numColumns","Math","ceil","imagesIndex","navigationBar","underlinePageBreak","textBlock","imageLightbox"],"mappings":"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","file":"dist.min.js","sourcesContent":["angular\n  .module('PortfolioSPAModule')\n  .controller('aboutController', aboutController);\n\naboutController.$inject = ['$scope'];\nfunction aboutController($scope){\n  var viewModel = this;\n\n  viewModel.myVariable = \"I'm pretty cool, I guess.\";\n}\n","angular\n  .module('PortfolioSPAModule')\n  .controller('adminController', adminController);\n\nadminController.$inject = ['$location', '$http', 'authentication'];\nfunction adminController($location, $http, authentication){\n  var viewModel = this;\n\n  // Immediatelly check if a user is logged in, otherwise leave.\n  if(authentication.isLoggedIn() === false){\n    $location.path('/');\n  }\n\n  viewModel.formError = \"\";\n\n  viewModel.createProject = function(){\n    $http.post('/api/projects', {lol: \"data\"}, {\n      headers: {\n        Authorization: 'Bearer ' + authentication.getToken()\n      }\n    }).then(\n      function(response){\n        viewModel.formError = \"Project created!\";\n      },\n      function(response){\n        viewModel.formError = \"Something went wrong trying to create project. \" + response.data.message;\n      }\n    );\n  };\n\n  viewModel.logout = function(){\n    authentication.logout();\n    $location.path('/');\n  };\n}\n","angular\n  .module('PortfolioSPAModule')\n  .controller('loginCtrl', loginCtrl);\n\nloginCtrl.$inject = ['$location', 'authentication'];\nfunction loginCtrl($location, authentication){\n  var viewModel = this;\n\n  viewModel.pageHeader = {\n    title: 'Admin Sign In'\n  };\n\n  viewModel.credentials = {\n    username: \"\",\n    password: \"\"\n  };\n\n  viewModel.returnPage = '/admin'; // Go to admin page once logged in.\n  viewModel.onSubmit = function(){\n    viewModel.formError = \"\";\n    if(!viewModel.credentials.username || !viewModel.credentials.password){\n      viewModel.formError = \"All fields required.\";\n      return false;\n    }\n    else{\n      viewModel.doLogin();\n    }\n  };\n\n  viewModel.doLogin = function(){\n    viewModel.formError = \"\";\n    authentication\n      .login(viewModel.credentials)\n      .error(function(err){\n        viewModel.formError = err.message;\n      })\n      .then(function(){\n        //$location.search('page', null); no need to get query param for return page.\n        $location.path(viewModel.returnPage);\n      });\n  };\n}\n","/*\n* Angular application.\n*/\n\n(function(){\n\n  // Define the app module and it's dependencies.\n  angular.module('PortfolioSPAModule', ['ngRoute']);\n\n  // Create a config for our app -- configure our routes.\n  function config ($routeProvider, $locationProvider){\n    $routeProvider\n      .when('/', {\n        templateUrl: 'home/home.view.html',\n        controller: 'homeController',\n        controllerAs: 'viewModel'\n      })\n      .when('/about', {\n        templateUrl: 'about/about.view.html',\n        controller: 'aboutController',\n        controllerAs: 'viewModel'\n      })\n      .when('/projects/:projectid', {\n        templateUrl: 'projectPage/projectPage.view.html',\n        controller: 'projectPageController',\n        controllerAs: 'viewModel'\n      })\n      .when('/login', {\n        templateUrl: '/login/login.view.html',\n        controller: 'loginCtrl',\n        controllerAs: 'viewModel'\n      })\n      .when('/admin', {\n        templateUrl: '/admin/admin.view.html',\n        controller: 'adminController',\n        controllerAs: 'viewModel'\n      })\n      .otherwise({redirectTo: '/'});\n\n    // Pretty up URLs. Base defined in index.html.\n    $locationProvider.html5Mode(true);\n  }\n\n  // Add the config to our app.\n  angular\n    .module('PortfolioSPAModule')\n    .config(['$routeProvider', '$locationProvider', config]);\n\n})();\n","// Using function scopes to prevent global scope variables.\n// God, I can't wait to use typescript.\n(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .controller('homeController', homeController);\n\n  homeController.$inject = ['$scope', '$window', '$location', '$sce', 'ProjectsService'];\n  function homeController($scope, $window, $location, $sce, ProjectsService){\n    var viewModel = this;\n    var categoryFilter = $location.search().category; // Once per 'page load'\n\n    viewModel.videoLink = $sce.trustAsResourceUrl(\"https://www.youtube.com/embed/CJ_GCPaKywg\");\n    viewModel.showVideo = categoryFilter === undefined; // Promo on 'all' page.\n\n    ///\n    /// Request the projects to disply on the home page.\n    ///\n    ProjectsService.GetProjectsHomePage(categoryFilter, function(projectsVm){\n      viewModel.projects = projectsVm;\n    });\n\n    ///\n    /// Re-get the projects if page is resized (getting projects will rebuild the rows\n    /// according to screen size).\n    /// TODO: Only get projects when resizing is done so we're not making a million calls.\n    ///\n    angular.element($window).bind('resize', function () {\n      // Possiblity to cache here... if necessary.\n      ProjectsService.GetProjectsHomePage(categoryFilter, function(projectsVm){\n        viewModel.projects = projectsVm;\n        //$scope.$apply(); // Not needed... two way bind automatically digests.\n      });\n    });\n  }\n\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .controller('projectPageController', projectPageController);\n\n  projectPageController.$inject = ['$window', '$routeParams', 'ProjectsService'];\n  function projectPageController($window, $routeParams, ProjectsService){\n    var viewModel = this;\n\n    viewModel.projectId = $routeParams.projectid;\n\n    // Make sure we always start at the top of the page.\n    $window.scrollTo(0, 0);\n\n    ProjectsService.GetProjectPage($routeParams.projectid, function(pageData){\n      viewModel.blogItems = pageData;\n    });\n  }\n\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .service('authentication', authentication);\n\n    authentication.$inject = ['$window', '$http'];\n    function authentication($window, $http){\n      var saveToken = function(token){\n        $window.localStorage['admin-token'] = token;\n      };\n\n      var getToken = function(){\n        return $window.localStorage['admin-token'];\n      };\n\n      var login = function(user){\n        return $http.post('/api/login', user).success(function(data){\n          saveToken(data.token);\n        });\n      };\n\n      var logout = function(){\n        $window.localStorage.removeItem('admin-token');\n      };\n\n      var isLoggedIn = function(){\n        var token = getToken();\n\n        if(token){\n          var payload = JSON.parse($window.atob(token.split('.')[1]));\n\n          return payload.exp > Date.now() / 1000;\n        }\n        else{\n          return false;\n        }\n      };\n\n      var currentUser = function(){\n        if(isLoggedIn()){\n          var token = getToken();\n          var payload = JSON.parse($window.atob(token.split('.')[1]));\n          return {\n            username: payload.username\n          };\n        }\n      };\n\n      return {\n        login: login,\n        logout: logout,\n        isLoggedIn: isLoggedIn,\n        saveToken: saveToken,\n        getToken: getToken\n      };\n    }\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .service('DataMappingService', DataMappingService);\n\n  DataMappingService.$inject = ['$sce', 'ResponsiveService'];\n  function DataMappingService($sce, ResponsiveService){\n    var service = this;\n\n    ///\n    /// Map the data returned by a project page to its view model.\n    ///\n     service.MapProjectDataToProjectPageVm = function(data){\n      var blogItems = [];\n\n      var i = 0;\n      for(i = 0; i < data.videos.length; i++){\n        // Trust the link provided and add.\n        data.videos[i].source = $sce.trustAsResourceUrl(data.videos[i].source);\n        blogItems.push(data.videos[i]);\n      }\n\n      for(i = 0; i < data.textBlocks.length; i++){\n        blogItems.push(data.textBlocks[i]);\n      }\n\n      for(i = 0; i < data.coverImages.length; i++){\n        blogItems.push(data.coverImages[i]);\n      }\n\n      for(i = 0; i < data.galleries.length; i++){\n        blogItems.push(data.galleries[i]);\n      }\n\n      for(i = 0; i < data.pageBreaks.length; i++){\n        blogItems.push(data.pageBreaks[i]);\n      }\n\n      // Sort the list by position\n      blogItems.sort(function(a, b) {\n        return a.position > b.position;\n      });\n\n      return blogItems;\n    };\n\n    ///\n    /// Take an array of projects and map them to a 2D array of relevent\n    /// project info to be used by the view.\n    ///\n    service.MapProjectsDataToHomePageVm = function(projects){\n      if(projects === undefined){\n        console.error(\"projects is undefined.\");\n        return;\n      }\n\n      if(projects.length === 0){\n        console.error(\"No projects in the projects array.\");\n        return;\n      }\n\n      if(Array.isArray(projects) === false){\n        console.error(\"Array of projects not provided.\");\n        return;\n      }\n\n      var rowSize = ResponsiveService.GetHomePageRowSize();\n      var projectRows = [];\n      var rows = projects.length / rowSize;\n\n      if(rows === 0) rows = 1;\n\n      var projectsIndex = 0;\n      for (var y = 0; y < rows; y++) {\n        projectRows.push([]);\n\n        for(var x = 0; x < rowSize; x++, projectsIndex++){\n          // Break if no projects remaining.\n          if(projectsIndex === projects.length) break;\n\n          projectRows[y].push(projects[ projectsIndex ]);\n        }\n      }\n\n      return projectRows;\n    };\n\n  }\n\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .service('ProjectsService', ProjectsService);\n\n  ProjectsService.$inject = ['$sce', '$http', 'DataMappingService'];\n  function ProjectsService($sce, $http, DataMappingService){\n    var service = this;\n\n    service.allProjectsFilter = undefined;\n    service.filmProjectsFilter = \"film\";\n    service.artProjectsFilter = \"art\";\n\n    ///\n    /// Get a project page by its id.\n    ///\n    service.GetProjectPage = function(projectId, callback){\n\n      $http.get('/api/projects/' + projectId).then(\n        function(response){\n          if(response.status === 200){\n            callback(DataMappingService.MapProjectDataToProjectPageVm(response.data));\n          }\n        },\n        function(response){\n          console.error(\"Something went wrong getting project page \" + projectId);\n          // TODO: Redirect to 404 not found.\n      });\n    };\n\n    ///\n    /// Get all projects as they are needed on the home page.\n    ///\n    service.GetProjectsHomePage = function(category, callback){\n\n      if(category !== service.allProjectsFilter &&\n        category !== service.filmProjectsFilter &&\n        category !== service.artProjectsFilter){\n          console.error(\"Invalid category provided: \" + category);\n          return;\n      }\n\n      $http.get('/api/projects/').then(\n        function(response){\n          if(response.status === 200){\n            var filteredProjectsList = FilterProjectsByCategory(response.data.projects, category);\n            var mapped =  DataMappingService.MapProjectsDataToHomePageVm(filteredProjectsList);\n\n            callback(mapped);\n          }\n        },\n        function(response){\n          console.log(\"Something went wrong while getting all projects.\");\n      });\n    };\n\n    ///\n    /// Filter the projects by the provided category.\n    ///\n    var FilterProjectsByCategory = function(projects, category){\n      var filteredProjects = [];\n\n      if(category === service.allProjectsFilter){\n        return projects;\n      }\n\n      for(var i = 0; i < projects.length; i++){\n        // If the project category matches, add it to our results.\n        if(projects[i].category === category){\n          filteredProjects.push(projects[i]);\n        }\n      }\n\n      return filteredProjects;\n    };\n  }\n\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .service('ResponsiveService', ResponsiveService);\n\n  ResponsiveService.$inject = ['$window'];\n  function ResponsiveService($window){\n    var service = this;\n\n    var smallScreenMax = 900;\n    var mediumScreenMax = 1500;\n\n    ///\n    /// Get the number of projects we want to show in a row based on how\n    /// big the screen is.\n    ///\n    service.GetHomePageRowSize = function(){\n      var rowSize = 1;\n\n      if($window.innerWidth > smallScreenMax){\n        rowSize = 2;\n      }\n\n      if($window.innerWidth > mediumScreenMax){\n        rowSize = 3;\n      }\n\n      return rowSize;\n    };\n  }\n\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('coverImage', coverImage);\n\n  function coverImage(){\n    return{\n      restrict:'EA',\n      scope:{\n        content: '=content'\n      },\n      templateUrl: '/common/directives/coverImage/coverImage.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('embededVideo', embededVideo);\n\n  function embededVideo(){\n    return{\n      restrict:'EA',\n      scope:{\n        embededUrl: '=embededUrl'\n      },\n      templateUrl: '/common/directives/embededVideo/embededVideo.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .controller('imageGalleryController', imageGalleryController)\n    .directive('imageGallery', imageGallery);\n\n  function imageGallery(){\n    return{\n      restrict:'EA',\n      scope:{\n        content: '=content',\n        selectedImage: '=selectedImage'\n      },\n      templateUrl: '/common/directives/imageGallery/imageGallery.directive.html',\n      controller: imageGalleryController,\n      controllerAs: 'ctrl'\n    };\n  }\n\n  ///\n  /// Define a controller for this image gallery to use.\n  ///\n  imageGalleryController.$inject = ['$scope', '$window'];\n  function imageGalleryController($scope, $window){\n    var ctrl = this;\n    var tinyScreenMax = 600;\n    var smallScreenMax = 650;\n    var mediumScreenMax = 1000;\n    // Never really want more than 4 columns or balance starts to look shit.\n    ctrl.lightboxImage = \"\";\n\n    ctrl.GalleryThumbClick = function(image){\n      // Set modal image\n      $scope.selectedImage = image;\n    };\n\n    angular.element($window).bind('resize', function () {\n      console.log(\"resizing\");\n      // Possiblity to cache here... if necessary.\n      ctrl.imageThumbs = FormatImageList($scope.content); // format images with new number of columns based on screen size.\n      $scope.$apply(); // This is needed here... will occasionally update on its own.\n    });\n\n    var GetNumberOfColumns = function(){\n      var numCols = 2;\n\n      //if($window.innerWidth > tinyScreenMax){\n        numCols = 2;\n      //}\n      if($window.innerWidth > smallScreenMax){\n        numCols = 3;\n      }\n      if($window.innerWidth > mediumScreenMax){\n        numCols = 4;\n      }\n\n      return numCols;\n    };\n\n    var FormatImageList = function(images){\n      var columns = [];\n      var numColumns = GetNumberOfColumns();\n      var rows = Math.ceil(images.length / numColumns);\n\n      var imagesIndex = 0;\n      for (var y = 0; y < rows; y++) {\n        for(var x = 0; x < numColumns; x++, imagesIndex++){\n          if(columns[x] === undefined){\n            columns.push([]);\n          }\n\n          // Break if no projects remaining.\n          if(imagesIndex === images.length) break;\n\n          columns[x].push(images[ imagesIndex ]);\n        }\n      }\n\n      return columns;\n    };\n\n    ctrl.imageThumbs = FormatImageList($scope.content);\n  }\n\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('navigationBar', navigationBar);\n\n  function navigationBar(){\n    return{\n      restrict:'EA',\n      templateUrl: '/common/directives/navigationBar/navigationBar.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('underlinePageBreak', underlinePageBreak);\n\n  function underlinePageBreak(){\n    return{\n      restrict:'EA',\n      templateUrl: '/common/directives/pageBreak/underline.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('textBlock', textBlock);\n\n  function textBlock(){\n    return{\n      restrict:'EA',\n      scope:{\n        content: '=content'\n      },\n      templateUrl: '/common/directives/textBlock/textBlock.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('imageLightbox', imageLightbox);\n\n  function imageLightbox(){\n    return{\n      restrict:'EA',\n      scope:{\n        content: '=content'\n      },\n      templateUrl: '/common/directives/imageLightbox/imageLightbox.directive.html'\n    };\n  }\n})();\n"],"sourceRoot":"/source/"}