{"version":3,"sources":["login/login.controller.js","about/about.controller.js","app.js","home/home.controller.js","projectPage/projectPage.controller.js","common/services/authentication.service.js","common/services/dataMappingService.js","common/services/projectsService.js","common/services/responsiveService.js","common/services/upload.service.js","admin/newProject/newProject.controller.js","admin/dashboard/dashboard.controller.js","common/directives/coverImage/coverImage.directive.js","common/directives/embededVideo/embededVideo.directive.js","common/directives/fileModel/fileModel.directive.js","common/directives/imageGallery/imageGallery.directive.js","common/directives/imageLightbox/imageLightbox.directive.js","common/directives/navigationBar/navigationBar.directive.js","common/directives/pageBreak/underline.directive.js","common/directives/textBlock/textBlock.directive.js"],"names":["loginCtrl","$location","AuthentictionService","viewModel","this","pageHeader","title","credentials","username","password","returnPage","onSubmit","formError","doLogin","login","error","err","message","then","path","aboutController","$scope","myVariable","config","$routeProvider","$locationProvider","when","templateUrl","controller","controllerAs","otherwise","redirectTo","html5Mode","angular","module","homeController","$window","$sce","ProjectsService","categoryFilter","search","category","videoLink","trustAsResourceUrl","showVideo","undefined","GetProjectsHomePage","projectsVm","projects","element","bind","$inject","projectPageController","$routeParams","projectId","projectid","scrollTo","GetProjectPage","pageData","blogItems","$http","saveToken","token","localStorage","getToken","user","post","success","data","logout","removeItem","isLoggedIn","payload","JSON","parse","atob","split","exp","Date","now","service","DataMappingService","ResponsiveService","MapProjectDataToProjectPageVm","pageItems","sort","a","b","position","i","length","type","content","MapProjectsDataToHomePageVm","console","Array","isArray","rowSize","GetHomePageRowSize","projectRows","rows","projectsIndex","y","push","x","allProjectsFilter","filmProjectsFilter","artProjectsFilter","GetAllProjects","callback","get","response","status","filteredProjectsList","FilterProjectsByCategory","mapped","log","filteredProjects","smallScreenMax","mediumScreenMax","innerWidth","UploadService","uploadImage","fileData","successCB","errorCB","fd","FormData","append","transformRequest","identity","headers","Content-Type","Authorization","newProjectController","formMessageHeader","created","newProject","createProject","aspect","$","width","height","projectCoverImageAspectRatio","uploadProjectCoverImage","projectCoverImage","filepath","uploadBlogItemCoverImage","index","uploadToGallery","contentArray","addNewPageItem","dashboardController","coverImage","restrict","scope","directive","embededVideo","embededUrl","fileModel","$parse","link","attrs","model","modelSetter","assign","$apply","files","imageGallery","selectedImage","imageGalleryController","ctrl","lightboxImage","GalleryThumbClick","image","imageThumbs","FormatImageList","GetNumberOfColumns","numCols","images","columns","numColumns","Math","ceil","imagesIndex","imageLightbox","navigationBar","underlinePageBreak","textBlock"],"mappings":"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","file":"dist.min.js","sourcesContent":["angular\n  .module('PortfolioSPAModule')\n  .controller('loginCtrl', loginCtrl);\n\nloginCtrl.$inject = ['$location', 'AuthentictionService'];\nfunction loginCtrl($location, AuthentictionService){\n  var viewModel = this;\n\n  viewModel.pageHeader = {\n    title: 'Admin Sign In'\n  };\n\n  viewModel.credentials = {\n    username: \"\",\n    password: \"\"\n  };\n\n  viewModel.returnPage = '/admin'; // Go to admin page once logged in.\n  viewModel.onSubmit = function(){\n    viewModel.formError = \"\";\n    if(!viewModel.credentials.username || !viewModel.credentials.password){\n      viewModel.formError = \"All fields required.\";\n      return false;\n    }\n    else{\n      viewModel.doLogin();\n    }\n  };\n\n  viewModel.doLogin = function(){\n    viewModel.formError = \"\";\n    AuthentictionService\n      .login(viewModel.credentials)\n      .error(function(err){\n        viewModel.formError = err.message;\n      })\n      .then(function(){\n        //$location.search('page', null); no need to get query param for return page.\n        $location.path(viewModel.returnPage);\n      });\n  };\n}\n","angular\n  .module('PortfolioSPAModule')\n  .controller('aboutController', aboutController);\n\naboutController.$inject = ['$scope'];\nfunction aboutController($scope){\n  var viewModel = this;\n\n  viewModel.myVariable = \"I'm pretty cool, I guess.\";\n}\n","/*\n* Angular application.\n*/\n\n(function(){\n\n  // Define the app module and it's dependencies.\n  angular.module('PortfolioSPAModule', ['ngRoute']);\n\n  // Create a config for our app -- configure our routes.\n  function config ($routeProvider, $locationProvider){\n    $routeProvider\n      .when('/', {\n        templateUrl: 'home/home.view.html',\n        controller: 'homeController',\n        controllerAs: 'viewModel'\n      })\n      .when('/about', {\n        templateUrl: 'about/about.view.html',\n        controller: 'aboutController',\n        controllerAs: 'viewModel'\n      })\n      .when('/projects/:projectid', {\n        templateUrl: 'projectPage/projectPage.view.html',\n        controller: 'projectPageController',\n        controllerAs: 'viewModel'\n      })\n      .when('/login', {\n        templateUrl: '/login/login.view.html',\n        controller: 'loginCtrl',\n        controllerAs: 'viewModel'\n      })\n      .when('/admin', {\n        templateUrl: '/admin/dashboard/dashboard.view.html',\n        controller: 'dashboardController',\n        controllerAs: 'viewModel'\n      })\n      .when('/admin/newProject', {\n        templateUrl: '/admin/newProject/newProject.view.html',\n        controller: 'newProjectController',\n        controllerAs: 'viewModel'\n      })\n      .otherwise({redirectTo: '/'});\n\n    // Pretty up URLs. Base defined in index.html.\n    $locationProvider.html5Mode(true);\n  }\n\n  // Add the config to our app.\n  angular\n    .module('PortfolioSPAModule')\n    .config(['$routeProvider', '$locationProvider', config]);\n\n})();\n","// Using function scopes to prevent global scope variables.\n// God, I can't wait to use typescript.\n(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .controller('homeController', homeController);\n\n  homeController.$inject = ['$scope', '$window', '$location', '$sce', 'ProjectsService'];\n  function homeController($scope, $window, $location, $sce, ProjectsService){\n    var viewModel = this;\n    var categoryFilter = $location.search().category; // Once per 'page load'\n\n    viewModel.videoLink = $sce.trustAsResourceUrl(\"https://www.youtube.com/embed/CJ_GCPaKywg\");\n    viewModel.showVideo = categoryFilter === undefined; // Promo on 'all' page.\n\n    ///\n    /// Request the projects to disply on the home page.\n    ///\n    ProjectsService.GetProjectsHomePage(categoryFilter, function(projectsVm){\n      viewModel.projects = projectsVm;\n    });\n\n    ///\n    /// Re-get the projects if page is resized (getting projects will rebuild the rows\n    /// according to screen size).\n    /// TODO: Only get projects when resizing is done so we're not making a million calls.\n    ///\n    angular.element($window).bind('resize', function () {\n      // Possiblity to cache here... if necessary.\n      ProjectsService.GetProjectsHomePage(categoryFilter, function(projectsVm){\n        viewModel.projects = projectsVm;\n        //$scope.$apply(); // Not needed... two way bind automatically digests.\n      });\n    });\n  }\n\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .controller('projectPageController', projectPageController);\n\n  projectPageController.$inject = ['$window', '$routeParams', 'ProjectsService'];\n  function projectPageController($window, $routeParams, ProjectsService){\n    var viewModel = this;\n\n    viewModel.projectId = $routeParams.projectid;\n\n    // Make sure we always start at the top of the page.\n    $window.scrollTo(0, 0);\n\n    ProjectsService.GetProjectPage($routeParams.projectid, function(pageData){\n      viewModel.blogItems = pageData;\n    });\n  }\n\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .service('AuthentictionService', AuthentictionService);\n\n    AuthentictionService.$inject = ['$window', '$http'];\n    function AuthentictionService($window, $http){\n      var saveToken = function(token){\n        $window.localStorage['admin-token'] = token;\n      };\n\n      var getToken = function(){\n        return $window.localStorage['admin-token'];\n      };\n\n      var login = function(user){\n        return $http.post('/api/login', user).success(function(data){\n          saveToken(data.token);\n        });\n      };\n\n      var logout = function(){\n        $window.localStorage.removeItem('admin-token');\n      };\n\n      var isLoggedIn = function(){\n        var token = getToken();\n\n        if(token){\n          var payload = JSON.parse($window.atob(token.split('.')[1]));\n\n          return payload.exp > Date.now() / 1000;\n        }\n        else{\n          return false;\n        }\n      };\n\n      var currentUser = function(){\n        if(isLoggedIn()){\n          var token = getToken();\n          var payload = JSON.parse($window.atob(token.split('.')[1]));\n          return {\n            username: payload.username\n          };\n        }\n      };\n\n      return {\n        login: login,\n        logout: logout,\n        isLoggedIn: isLoggedIn,\n        saveToken: saveToken,\n        getToken: getToken\n      };\n    }\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .service('DataMappingService', DataMappingService);\n\n  DataMappingService.$inject = ['$sce', 'ResponsiveService'];\n  function DataMappingService($sce, ResponsiveService){\n    var service = this;\n\n    ///\n    /// Map the data returned by a project page to its view model.\n    ///\n     service.MapProjectDataToProjectPageVm = function(data){\n      var blogItems = data.pageItems;\n\n      // Sort the list by position\n      blogItems.sort(function(a, b) {\n        return a.position > b.position;\n      });\n\n      // Trust all video links as secure.\n      for(var i = 0; i < data.pageItems.length; i++){\n        if(data.pageItems[i].type === \"video\"){\n          data.pageItems[i].content = $sce.trustAsResourceUrl(data.pageItems[i].content);\n        }\n      }\n\n      return blogItems;\n    };\n\n    ///\n    /// Take an array of projects and map them to a 2D array of relevent\n    /// project info to be used by the view.\n    ///\n    service.MapProjectsDataToHomePageVm = function(projects){\n      if(projects === undefined){\n        console.error(\"projects is undefined.\");\n        return;\n      }\n\n      if(projects.length === 0){\n        console.error(\"No projects in the projects array.\");\n        return;\n      }\n\n      if(Array.isArray(projects) === false){\n        console.error(\"Array of projects not provided.\");\n        return;\n      }\n\n      projects.sort(function(a, b) {\n        return a.position > b.position;\n      });\n\n      var rowSize = ResponsiveService.GetHomePageRowSize();\n      var projectRows = [];\n      var rows = projects.length / rowSize;\n\n      if(rows === 0) rows = 1;\n\n      var projectsIndex = 0;\n      for (var y = 0; y < rows; y++) {\n        projectRows.push([]);\n\n        for(var x = 0; x < rowSize; x++, projectsIndex++){\n          // Break if no projects remaining.\n          if(projectsIndex === projects.length) break;\n\n          projectRows[y].push(projects[ projectsIndex ]);\n        }\n      }\n\n      return projectRows;\n    };\n\n  }\n\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .service('ProjectsService', ProjectsService);\n\n  ProjectsService.$inject = ['$sce', '$http', 'DataMappingService'];\n  function ProjectsService($sce, $http, DataMappingService){\n    var service = this;\n\n    service.allProjectsFilter = undefined;\n    service.filmProjectsFilter = \"film\";\n    service.artProjectsFilter = \"art\";\n\n    ///\n    /// Get all the projects raw data\n    ///\n    service.GetAllProjects = function(callback){\n      $http.get('/api/projects/').then(\n        function(response){\n          if(response.status === 200){\n\n            response.data.sort(function(a, b) {\n              return a.position > b.position;\n            });\n\n            callback(response.data);\n          }\n        },\n        function(response){\n          console.error(\"Something went wrong getting all projects.\");\n          // TODO: Redirect to 404 not found.\n      });\n    };\n\n    ///\n    /// Get a project page by its id.\n    ///\n    service.GetProjectPage = function(projectId, callback){\n\n      $http.get('/api/projects/' + projectId).then(\n        function(response){\n          if(response.status === 200){\n            callback(DataMappingService.MapProjectDataToProjectPageVm(response.data));\n          }\n        },\n        function(response){\n          console.error(\"Something went wrong getting project page \" + projectId);\n          // TODO: Redirect to 404 not found.\n      });\n    };\n\n    ///\n    /// Get all projects as they are needed on the home page.\n    ///\n    service.GetProjectsHomePage = function(category, callback){\n\n      if(category !== service.allProjectsFilter &&\n        category !== service.filmProjectsFilter &&\n        category !== service.artProjectsFilter){\n          console.error(\"Invalid category provided: \" + category);\n          return;\n      }\n\n      $http.get('/api/projects/').then(\n        function(response){\n          if(response.status === 200){\n            var filteredProjectsList = FilterProjectsByCategory(response.data, category);\n            var mapped =  DataMappingService.MapProjectsDataToHomePageVm(filteredProjectsList);\n\n            callback(mapped);\n          }\n        },\n        function(response){\n          console.log(\"Something went wrong while getting all projects.\");\n      });\n    };\n\n    ///\n    /// Filter the projects by the provided category.\n    ///\n    var FilterProjectsByCategory = function(projects, category){\n      var filteredProjects = [];\n\n      if(category === service.allProjectsFilter){\n        return projects;\n      }\n\n      for(var i = 0; i < projects.length; i++){\n        // If the project category matches, add it to our results.\n        if(projects[i].category === category){\n          filteredProjects.push(projects[i]);\n        }\n      }\n\n      return filteredProjects;\n    };\n  }\n\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .service('ResponsiveService', ResponsiveService);\n\n  ResponsiveService.$inject = ['$window'];\n  function ResponsiveService($window){\n    var service = this;\n\n    var smallScreenMax = 900;\n    var mediumScreenMax = 1500;\n\n    ///\n    /// Get the number of projects we want to show in a row based on how\n    /// big the screen is.\n    ///\n    service.GetHomePageRowSize = function(){\n      var rowSize = 1;\n\n      if($window.innerWidth > smallScreenMax){\n        rowSize = 2;\n      }\n\n      if($window.innerWidth > mediumScreenMax){\n        rowSize = 3;\n      }\n\n      return rowSize;\n    };\n  }\n\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .service('UploadService', UploadService);\n\n    UploadService.$inject = ['$http', 'AuthentictionService'];\n    function UploadService($http, AuthentictionService){\n      service = this;\n\n      service.uploadImage = function(fileData, successCB, errorCB){\n\n        var fd = new FormData();\n        fd.append('file', fileData);\n        $http.post(\"/api/upload\", fd, {\n            transformRequest: angular.identity,\n            headers: {\n              'Content-Type': undefined,\n              Authorization: 'Bearer ' + AuthentictionService.getToken()\n            }\n        })\n        .success(function(response){\n          successCB(response);\n        })\n        .error(function(response){\n          errorCB(response);\n        });\n      };\n\n    }\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .controller('newProjectController', newProjectController);\n\n  newProjectController.$inject = ['$scope', '$location', '$http', 'AuthentictionService', 'UploadService'];\n  function newProjectController($scope, $location, $http, AuthentictionService, UploadService){\n    var viewModel = this;\n\n    // Immediatelly check if a user is logged in, otherwise leave.\n    if(AuthentictionService.isLoggedIn() === false){\n      $location.path('/login');\n    }\n\n    viewModel.formMessageHeader = \"\";\n    viewModel.formError = \"\";\n    viewModel.created = false;\n    viewModel.newProject = {};\n    viewModel.fileData = {};\n\n    viewModel.createProject = function(){\n      var aspect = $('#projectCoverImage').width() / $('#projectCoverImage').height();\n      viewModel.newProject.projectCoverImageAspectRatio = aspect;\n\n      console.log(viewModel.newProject);\n\n      $http.post('/api/projects', viewModel.newProject, {\n        headers: {\n          Authorization: 'Bearer ' + AuthentictionService.getToken()\n        }\n      }).then(\n        function(response){\n          viewModel.formMessageHeader = \"Success!\";\n          viewModel.formError = \"Project created.\";\n          viewModel.created = true;\n          $location.path('/admin');\n        },\n        function(response){\n          viewModel.formMessageHeader = \"Oops!\";\n          viewModel.formError = \"Something went wrong trying to create project. \" + response.data.message;\n          viewModel.created = false;\n        }\n      );\n    };\n\n    viewModel.uploadProjectCoverImage = function(){\n      UploadService.uploadImage(viewModel.newProject.projectCoverImage,\n        function(response){\n          viewModel.newProject.projectCoverImage = response.filepath;\n        },\n        function(response){\n          console.log(\"something went wrong trying to upload file.\");\n      });\n    };\n\n    viewModel.uploadBlogItemCoverImage = function(index){\n      UploadService.uploadImage(viewModel.newProject.pageItems[index].content,\n        function(response){\n          viewModel.newProject.pageItems[index].content = response.filepath;\n        },\n        function(response){\n          console.log(\"something went wrong trying to upload file.\");\n      });\n    };\n\n    viewModel.uploadToGallery = function(index){\n      UploadService.uploadImage(viewModel.fileData,\n        function(response){\n          viewModel.newProject.pageItems[index].contentArray.push(response.filepath);\n        },\n        function(response){\n          console.log(\"something went wrong trying to upload file.\");\n      });\n    };\n\n    viewModel.addNewPageItem = function(){\n      if(viewModel.newProject.pageItems === undefined){\n        viewModel.newProject.pageItems = [];\n      }\n\n      viewModel.newProject.pageItems.push({\n        position: 0,\n        content: \"\",\n        contentArray: []\n      });\n    };\n\n    viewModel.logout = function(){\n      AuthentictionService.logout();\n      $location.path('/');\n    };\n  }\n\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .controller('dashboardController', dashboardController);\n\n  dashboardController.$inject = ['$scope', '$location', '$http', 'ProjectsService', 'AuthentictionService'];\n  function dashboardController($scope, $location, $http, ProjectsService, AuthentictionService){\n\n    // Immediatelly check if a user is logged in, otherwise leave.\n    if(AuthentictionService.isLoggedIn() === false){\n      $location.path('/login');\n    }\n\n    var viewModel = this;\n\n    viewModel.projects = [];\n\n    ///\n    /// Request the projects to disply on the home page.\n    ///\n    ProjectsService.GetAllProjects(function(projects){\n      viewModel.projects = projects;\n    });\n\n    viewModel.logout = function(){\n      AuthentictionService.logout();\n      $location.path('/');\n    };\n  }\n\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('coverImage', coverImage);\n\n  function coverImage(){\n    return{\n      restrict:'EA',\n      scope:{\n        content: '=content'\n      },\n      templateUrl: '/common/directives/coverImage/coverImage.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('embededVideo', embededVideo);\n\n  function embededVideo(){\n    return{\n      restrict:'EA',\n      scope:{\n        embededUrl: '=embededUrl'\n      },\n      templateUrl: '/common/directives/embededVideo/embededVideo.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('fileModel', ['$parse', fileModel]);\n\n  function fileModel($parse){\n    return{\n      restrict:'A',\n      link: function(scope, element, attrs){\n        var model = $parse(attrs.fileModel);\n        var modelSetter = model.assign;\n\n        element.bind('change', function(){\n          scope.$apply(function(){\n            modelSetter(scope, element[0].files[0]);\n          });\n        });\n      }\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .controller('imageGalleryController', imageGalleryController)\n    .directive('imageGallery', imageGallery);\n\n  function imageGallery(){\n    return{\n      restrict:'EA',\n      scope:{\n        content: '=content',\n        selectedImage: '=selectedImage'\n      },\n      templateUrl: '/common/directives/imageGallery/imageGallery.directive.html',\n      controller: imageGalleryController,\n      controllerAs: 'ctrl'\n    };\n  }\n\n  ///\n  /// Define a controller for this image gallery to use.\n  ///\n  imageGalleryController.$inject = ['$scope', '$window'];\n  function imageGalleryController($scope, $window){\n    var ctrl = this;\n    var tinyScreenMax = 600;\n    var smallScreenMax = 650;\n    var mediumScreenMax = 1000;\n    // Never really want more than 4 columns or balance starts to look shit.\n    ctrl.lightboxImage = \"\";\n\n    ctrl.GalleryThumbClick = function(image){\n      // Set modal image\n      $scope.selectedImage = image;\n    };\n\n    angular.element($window).bind('resize', function () {\n      console.log(\"resizing\");\n      // Possiblity to cache here... if necessary.\n      ctrl.imageThumbs = FormatImageList($scope.content); // format images with new number of columns based on screen size.\n      $scope.$apply(); // This is needed here... will occasionally update on its own.\n    });\n\n    var GetNumberOfColumns = function(){\n      var numCols = 2;\n\n      //if($window.innerWidth > tinyScreenMax){\n        numCols = 2;\n      //}\n      if($window.innerWidth > smallScreenMax){\n        numCols = 3;\n      }\n      if($window.innerWidth > mediumScreenMax){\n        numCols = 4;\n      }\n\n      return numCols;\n    };\n\n    var FormatImageList = function(images){\n      var columns = [];\n      var numColumns = GetNumberOfColumns();\n      var rows = Math.ceil(images.length / numColumns);\n\n      var imagesIndex = 0;\n      for (var y = 0; y < rows; y++) {\n        for(var x = 0; x < numColumns; x++, imagesIndex++){\n          if(columns[x] === undefined){\n            columns.push([]);\n          }\n\n          // Break if no projects remaining.\n          if(imagesIndex === images.length) break;\n\n          columns[x].push(images[ imagesIndex ]);\n        }\n      }\n\n      return columns;\n    };\n\n    ctrl.imageThumbs = FormatImageList($scope.content);\n  }\n\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('imageLightbox', imageLightbox);\n\n  function imageLightbox(){\n    return{\n      restrict:'EA',\n      scope:{\n        content: '=content'\n      },\n      templateUrl: '/common/directives/imageLightbox/imageLightbox.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('navigationBar', navigationBar);\n\n  function navigationBar(){\n    return{\n      restrict:'EA',\n      templateUrl: '/common/directives/navigationBar/navigationBar.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('underlinePageBreak', underlinePageBreak);\n\n  function underlinePageBreak(){\n    return{\n      restrict:'EA',\n      templateUrl: '/common/directives/pageBreak/underline.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('textBlock', textBlock);\n\n  function textBlock(){\n    return{\n      restrict:'EA',\n      scope:{\n        content: '=content'\n      },\n      templateUrl: '/common/directives/textBlock/textBlock.directive.html'\n    };\n  }\n})();\n"],"sourceRoot":"/source/"}