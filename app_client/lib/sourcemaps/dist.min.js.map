{"version":3,"sources":["about/about.controller.js","admin/admin.controller.js","login/login.controller.js","app.js","home/home.controller.js","projectPage/projectPage.controller.js","common/services/authentication.service.js","common/services/dataMappingService.js","common/services/projectsService.js","common/services/responsiveService.js","common/services/upload.service.js","common/directives/coverImage/coverImage.directive.js","common/directives/embededVideo/embededVideo.directive.js","common/directives/fileModel/fileModel.directive.js","common/directives/imageGallery/imageGallery.directive.js","common/directives/imageLightbox/imageLightbox.directive.js","common/directives/navigationBar/navigationBar.directive.js","common/directives/pageBreak/underline.directive.js","common/directives/textBlock/textBlock.directive.js"],"names":["aboutController","$scope","viewModel","this","myVariable","adminController","$location","$http","AuthentictionService","UploadService","isLoggedIn","path","formMessageHeader","formError","created","newProject","fileData","createProject","aspect","$","width","height","projectCoverImageAspectRatio","post","headers","Authorization","getToken","then","response","data","message","uploadProjectCoverImage","uploadImage","projectCoverImage","filepath","console","log","uploadBlogItemCoverImage","index","pageItems","content","uploadToGallery","contentArray","push","addNewPageItem","undefined","position","logout","loginCtrl","pageHeader","title","credentials","username","password","returnPage","onSubmit","doLogin","login","error","err","config","$routeProvider","$locationProvider","when","templateUrl","controller","controllerAs","otherwise","redirectTo","html5Mode","angular","module","$inject","homeController","$window","$sce","ProjectsService","categoryFilter","search","category","videoLink","trustAsResourceUrl","showVideo","GetProjectsHomePage","projectsVm","projects","element","bind","projectPageController","$routeParams","projectId","projectid","scrollTo","GetProjectPage","pageData","blogItems","saveToken","token","localStorage","user","success","removeItem","payload","JSON","parse","atob","split","exp","Date","now","service","DataMappingService","ResponsiveService","MapProjectDataToProjectPageVm","sort","a","b","i","length","type","MapProjectsDataToHomePageVm","Array","isArray","rowSize","GetHomePageRowSize","projectRows","rows","projectsIndex","y","x","allProjectsFilter","filmProjectsFilter","artProjectsFilter","callback","get","status","filteredProjectsList","FilterProjectsByCategory","mapped","filteredProjects","smallScreenMax","mediumScreenMax","innerWidth","successCB","errorCB","fd","FormData","append","transformRequest","identity","Content-Type","coverImage","restrict","scope","directive","embededVideo","embededUrl","fileModel","$parse","link","attrs","model","modelSetter","assign","$apply","files","imageGallery","selectedImage","imageGalleryController","ctrl","lightboxImage","GalleryThumbClick","image","imageThumbs","FormatImageList","GetNumberOfColumns","numCols","images","columns","numColumns","Math","ceil","imagesIndex","imageLightbox","navigationBar","underlinePageBreak","textBlock"],"mappings":"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","file":"dist.min.js","sourcesContent":["angular\n  .module('PortfolioSPAModule')\n  .controller('aboutController', aboutController);\n\naboutController.$inject = ['$scope'];\nfunction aboutController($scope){\n  var viewModel = this;\n\n  viewModel.myVariable = \"I'm pretty cool, I guess.\";\n}\n","angular\n  .module('PortfolioSPAModule')\n  .controller('adminController', adminController);\n\nadminController.$inject = ['$scope', '$location', '$http', 'AuthentictionService', 'UploadService'];\nfunction adminController($scope, $location, $http, AuthentictionService, UploadService){\n  var viewModel = this;\n\n  // Immediatelly check if a user is logged in, otherwise leave.\n  if(AuthentictionService.isLoggedIn() === false){\n    $location.path('/login');\n  }\n\n  viewModel.formMessageHeader = \"\";\n  viewModel.formError = \"\";\n  viewModel.created = false;\n  viewModel.newProject = {};\n  viewModel.fileData = {};\n\n  viewModel.createProject = function(){\n    var aspect = $('#projectCoverImage').width() / $('#projectCoverImage').height();\n    viewModel.newProject.projectCoverImageAspectRatio = aspect;\n\n    $http.post('/api/projects', viewModel.newProject, {\n      headers: {\n        Authorization: 'Bearer ' + AuthentictionService.getToken()\n      }\n    }).then(\n      function(response){\n        viewModel.formMessageHeader = \"Success!\";\n        viewModel.formError = \"Project created.\";\n        viewModel.created = true;\n      },\n      function(response){\n        viewModel.formMessageHeader = \"Oops!\";\n        viewModel.formError = \"Something went wrong trying to create project. \" + response.data.message;\n        viewModel.created = false;\n      }\n    );\n  };\n\n  viewModel.uploadProjectCoverImage = function(){\n    UploadService.uploadImage(viewModel.newProject.projectCoverImage,\n      function(response){\n        viewModel.newProject.projectCoverImage = response.filepath;\n      },\n      function(response){\n        console.log(\"something went wrong trying to upload file.\");\n    });\n  };\n\n  viewModel.uploadBlogItemCoverImage = function(index){\n    UploadService.uploadImage(viewModel.newProject.pageItems[index].content,\n      function(response){\n        viewModel.newProject.pageItems[index].content = response.filepath;\n      },\n      function(response){\n        console.log(\"something went wrong trying to upload file.\");\n    });\n  };\n\n  viewModel.uploadToGallery = function(index){\n    UploadService.uploadImage(viewModel.fileData,\n      function(response){\n        viewModel.newProject.pageItems[index].contentArray.push(response.filepath);\n      },\n      function(response){\n        console.log(\"something went wrong trying to upload file.\");\n    });\n  };\n\n  viewModel.addNewPageItem = function(){\n    if(viewModel.newProject.pageItems === undefined){\n      viewModel.newProject.pageItems = [];\n    }\n\n    viewModel.newProject.pageItems.push({\n      position: 0,\n      content: \"\",\n      contentArray: []\n    });\n  };\n\n  viewModel.logout = function(){\n    AuthentictionService.logout();\n    $location.path('/');\n  };\n}\n","angular\n  .module('PortfolioSPAModule')\n  .controller('loginCtrl', loginCtrl);\n\nloginCtrl.$inject = ['$location', 'AuthentictionService'];\nfunction loginCtrl($location, AuthentictionService){\n  var viewModel = this;\n\n  viewModel.pageHeader = {\n    title: 'Admin Sign In'\n  };\n\n  viewModel.credentials = {\n    username: \"\",\n    password: \"\"\n  };\n\n  viewModel.returnPage = '/admin'; // Go to admin page once logged in.\n  viewModel.onSubmit = function(){\n    viewModel.formError = \"\";\n    if(!viewModel.credentials.username || !viewModel.credentials.password){\n      viewModel.formError = \"All fields required.\";\n      return false;\n    }\n    else{\n      viewModel.doLogin();\n    }\n  };\n\n  viewModel.doLogin = function(){\n    viewModel.formError = \"\";\n    AuthentictionService\n      .login(viewModel.credentials)\n      .error(function(err){\n        viewModel.formError = err.message;\n      })\n      .then(function(){\n        //$location.search('page', null); no need to get query param for return page.\n        $location.path(viewModel.returnPage);\n      });\n  };\n}\n","/*\n* Angular application.\n*/\n\n(function(){\n\n  // Define the app module and it's dependencies.\n  angular.module('PortfolioSPAModule', ['ngRoute']);\n\n  // Create a config for our app -- configure our routes.\n  function config ($routeProvider, $locationProvider){\n    $routeProvider\n      .when('/', {\n        templateUrl: 'home/home.view.html',\n        controller: 'homeController',\n        controllerAs: 'viewModel'\n      })\n      .when('/about', {\n        templateUrl: 'about/about.view.html',\n        controller: 'aboutController',\n        controllerAs: 'viewModel'\n      })\n      .when('/projects/:projectid', {\n        templateUrl: 'projectPage/projectPage.view.html',\n        controller: 'projectPageController',\n        controllerAs: 'viewModel'\n      })\n      .when('/login', {\n        templateUrl: '/login/login.view.html',\n        controller: 'loginCtrl',\n        controllerAs: 'viewModel'\n      })\n      .when('/admin', {\n        templateUrl: '/admin/admin.view.html',\n        controller: 'adminController',\n        controllerAs: 'viewModel'\n      })\n      .otherwise({redirectTo: '/'});\n\n    // Pretty up URLs. Base defined in index.html.\n    $locationProvider.html5Mode(true);\n  }\n\n  // Add the config to our app.\n  angular\n    .module('PortfolioSPAModule')\n    .config(['$routeProvider', '$locationProvider', config]);\n\n})();\n","// Using function scopes to prevent global scope variables.\n// God, I can't wait to use typescript.\n(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .controller('homeController', homeController);\n\n  homeController.$inject = ['$scope', '$window', '$location', '$sce', 'ProjectsService'];\n  function homeController($scope, $window, $location, $sce, ProjectsService){\n    var viewModel = this;\n    var categoryFilter = $location.search().category; // Once per 'page load'\n\n    viewModel.videoLink = $sce.trustAsResourceUrl(\"https://www.youtube.com/embed/CJ_GCPaKywg\");\n    viewModel.showVideo = categoryFilter === undefined; // Promo on 'all' page.\n\n    ///\n    /// Request the projects to disply on the home page.\n    ///\n    ProjectsService.GetProjectsHomePage(categoryFilter, function(projectsVm){\n      viewModel.projects = projectsVm;\n    });\n\n    ///\n    /// Re-get the projects if page is resized (getting projects will rebuild the rows\n    /// according to screen size).\n    /// TODO: Only get projects when resizing is done so we're not making a million calls.\n    ///\n    angular.element($window).bind('resize', function () {\n      // Possiblity to cache here... if necessary.\n      ProjectsService.GetProjectsHomePage(categoryFilter, function(projectsVm){\n        viewModel.projects = projectsVm;\n        //$scope.$apply(); // Not needed... two way bind automatically digests.\n      });\n    });\n  }\n\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .controller('projectPageController', projectPageController);\n\n  projectPageController.$inject = ['$window', '$routeParams', 'ProjectsService'];\n  function projectPageController($window, $routeParams, ProjectsService){\n    var viewModel = this;\n\n    viewModel.projectId = $routeParams.projectid;\n\n    // Make sure we always start at the top of the page.\n    $window.scrollTo(0, 0);\n\n    ProjectsService.GetProjectPage($routeParams.projectid, function(pageData){\n      viewModel.blogItems = pageData;\n    });\n  }\n\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .service('AuthentictionService', AuthentictionService);\n\n    AuthentictionService.$inject = ['$window', '$http'];\n    function AuthentictionService($window, $http){\n      var saveToken = function(token){\n        $window.localStorage['admin-token'] = token;\n      };\n\n      var getToken = function(){\n        return $window.localStorage['admin-token'];\n      };\n\n      var login = function(user){\n        return $http.post('/api/login', user).success(function(data){\n          saveToken(data.token);\n        });\n      };\n\n      var logout = function(){\n        $window.localStorage.removeItem('admin-token');\n      };\n\n      var isLoggedIn = function(){\n        var token = getToken();\n\n        if(token){\n          var payload = JSON.parse($window.atob(token.split('.')[1]));\n\n          return payload.exp > Date.now() / 1000;\n        }\n        else{\n          return false;\n        }\n      };\n\n      var currentUser = function(){\n        if(isLoggedIn()){\n          var token = getToken();\n          var payload = JSON.parse($window.atob(token.split('.')[1]));\n          return {\n            username: payload.username\n          };\n        }\n      };\n\n      return {\n        login: login,\n        logout: logout,\n        isLoggedIn: isLoggedIn,\n        saveToken: saveToken,\n        getToken: getToken\n      };\n    }\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .service('DataMappingService', DataMappingService);\n\n  DataMappingService.$inject = ['$sce', 'ResponsiveService'];\n  function DataMappingService($sce, ResponsiveService){\n    var service = this;\n\n    ///\n    /// Map the data returned by a project page to its view model.\n    ///\n     service.MapProjectDataToProjectPageVm = function(data){\n      var blogItems = data.pageItems;\n\n      // Sort the list by position\n      blogItems.sort(function(a, b) {\n        return a.position > b.position;\n      });\n\n      // Trust all video links as secure.\n      for(var i = 0; i < data.pageItems.length; i++){\n        if(data.pageItems[i].type === \"video\"){\n          data.pageItems[i].content = $sce.trustAsResourceUrl(data.pageItems[i].content);\n        }\n      }\n\n      return blogItems;\n    };\n\n    ///\n    /// Take an array of projects and map them to a 2D array of relevent\n    /// project info to be used by the view.\n    ///\n    service.MapProjectsDataToHomePageVm = function(projects){\n      if(projects === undefined){\n        console.error(\"projects is undefined.\");\n        return;\n      }\n\n      if(projects.length === 0){\n        console.error(\"No projects in the projects array.\");\n        return;\n      }\n\n      if(Array.isArray(projects) === false){\n        console.error(\"Array of projects not provided.\");\n        return;\n      }\n\n      var rowSize = ResponsiveService.GetHomePageRowSize();\n      var projectRows = [];\n      var rows = projects.length / rowSize;\n\n      if(rows === 0) rows = 1;\n\n      var projectsIndex = 0;\n      for (var y = 0; y < rows; y++) {\n        projectRows.push([]);\n\n        for(var x = 0; x < rowSize; x++, projectsIndex++){\n          // Break if no projects remaining.\n          if(projectsIndex === projects.length) break;\n\n          projectRows[y].push(projects[ projectsIndex ]);\n        }\n      }\n\n      return projectRows;\n    };\n\n  }\n\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .service('ProjectsService', ProjectsService);\n\n  ProjectsService.$inject = ['$sce', '$http', 'DataMappingService'];\n  function ProjectsService($sce, $http, DataMappingService){\n    var service = this;\n\n    service.allProjectsFilter = undefined;\n    service.filmProjectsFilter = \"film\";\n    service.artProjectsFilter = \"art\";\n\n    ///\n    /// Get a project page by its id.\n    ///\n    service.GetProjectPage = function(projectId, callback){\n\n      $http.get('/api/projects/' + projectId).then(\n        function(response){\n          if(response.status === 200){\n            callback(DataMappingService.MapProjectDataToProjectPageVm(response.data));\n          }\n        },\n        function(response){\n          console.error(\"Something went wrong getting project page \" + projectId);\n          // TODO: Redirect to 404 not found.\n      });\n    };\n\n    ///\n    /// Get all projects as they are needed on the home page.\n    ///\n    service.GetProjectsHomePage = function(category, callback){\n\n      if(category !== service.allProjectsFilter &&\n        category !== service.filmProjectsFilter &&\n        category !== service.artProjectsFilter){\n          console.error(\"Invalid category provided: \" + category);\n          return;\n      }\n\n      $http.get('/api/projects/').then(\n        function(response){\n          if(response.status === 200){\n            var filteredProjectsList = FilterProjectsByCategory(response.data, category);\n            var mapped =  DataMappingService.MapProjectsDataToHomePageVm(filteredProjectsList);\n\n            callback(mapped);\n          }\n        },\n        function(response){\n          console.log(\"Something went wrong while getting all projects.\");\n      });\n    };\n\n    ///\n    /// Filter the projects by the provided category.\n    ///\n    var FilterProjectsByCategory = function(projects, category){\n      var filteredProjects = [];\n\n      if(category === service.allProjectsFilter){\n        return projects;\n      }\n\n      for(var i = 0; i < projects.length; i++){\n        // If the project category matches, add it to our results.\n        if(projects[i].category === category){\n          filteredProjects.push(projects[i]);\n        }\n      }\n\n      return filteredProjects;\n    };\n  }\n\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .service('ResponsiveService', ResponsiveService);\n\n  ResponsiveService.$inject = ['$window'];\n  function ResponsiveService($window){\n    var service = this;\n\n    var smallScreenMax = 900;\n    var mediumScreenMax = 1500;\n\n    ///\n    /// Get the number of projects we want to show in a row based on how\n    /// big the screen is.\n    ///\n    service.GetHomePageRowSize = function(){\n      var rowSize = 1;\n\n      if($window.innerWidth > smallScreenMax){\n        rowSize = 2;\n      }\n\n      if($window.innerWidth > mediumScreenMax){\n        rowSize = 3;\n      }\n\n      return rowSize;\n    };\n  }\n\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .service('UploadService', UploadService);\n\n    UploadService.$inject = ['$http', 'AuthentictionService'];\n    function UploadService($http, AuthentictionService){\n      service = this;\n\n      service.uploadImage = function(fileData, successCB, errorCB){\n\n        var fd = new FormData();\n        fd.append('file', fileData);\n        $http.post(\"/api/upload\", fd, {\n            transformRequest: angular.identity,\n            headers: {\n              'Content-Type': undefined,\n              Authorization: 'Bearer ' + AuthentictionService.getToken()\n            }\n        })\n        .success(function(response){\n          successCB(response);\n        })\n        .error(function(response){\n          errorCB(response);\n        });\n      };\n\n    }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('coverImage', coverImage);\n\n  function coverImage(){\n    return{\n      restrict:'EA',\n      scope:{\n        content: '=content'\n      },\n      templateUrl: '/common/directives/coverImage/coverImage.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('embededVideo', embededVideo);\n\n  function embededVideo(){\n    return{\n      restrict:'EA',\n      scope:{\n        embededUrl: '=embededUrl'\n      },\n      templateUrl: '/common/directives/embededVideo/embededVideo.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('fileModel', ['$parse', fileModel]);\n\n  function fileModel($parse){\n    return{\n      restrict:'A',\n      link: function(scope, element, attrs){\n        var model = $parse(attrs.fileModel);\n        var modelSetter = model.assign;\n\n        element.bind('change', function(){\n          scope.$apply(function(){\n            modelSetter(scope, element[0].files[0]);\n          });\n        });\n      }\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .controller('imageGalleryController', imageGalleryController)\n    .directive('imageGallery', imageGallery);\n\n  function imageGallery(){\n    return{\n      restrict:'EA',\n      scope:{\n        content: '=content',\n        selectedImage: '=selectedImage'\n      },\n      templateUrl: '/common/directives/imageGallery/imageGallery.directive.html',\n      controller: imageGalleryController,\n      controllerAs: 'ctrl'\n    };\n  }\n\n  ///\n  /// Define a controller for this image gallery to use.\n  ///\n  imageGalleryController.$inject = ['$scope', '$window'];\n  function imageGalleryController($scope, $window){\n    var ctrl = this;\n    var tinyScreenMax = 600;\n    var smallScreenMax = 650;\n    var mediumScreenMax = 1000;\n    // Never really want more than 4 columns or balance starts to look shit.\n    ctrl.lightboxImage = \"\";\n\n    ctrl.GalleryThumbClick = function(image){\n      // Set modal image\n      $scope.selectedImage = image;\n    };\n\n    angular.element($window).bind('resize', function () {\n      console.log(\"resizing\");\n      // Possiblity to cache here... if necessary.\n      ctrl.imageThumbs = FormatImageList($scope.content); // format images with new number of columns based on screen size.\n      $scope.$apply(); // This is needed here... will occasionally update on its own.\n    });\n\n    var GetNumberOfColumns = function(){\n      var numCols = 2;\n\n      //if($window.innerWidth > tinyScreenMax){\n        numCols = 2;\n      //}\n      if($window.innerWidth > smallScreenMax){\n        numCols = 3;\n      }\n      if($window.innerWidth > mediumScreenMax){\n        numCols = 4;\n      }\n\n      return numCols;\n    };\n\n    var FormatImageList = function(images){\n      var columns = [];\n      var numColumns = GetNumberOfColumns();\n      var rows = Math.ceil(images.length / numColumns);\n\n      var imagesIndex = 0;\n      for (var y = 0; y < rows; y++) {\n        for(var x = 0; x < numColumns; x++, imagesIndex++){\n          if(columns[x] === undefined){\n            columns.push([]);\n          }\n\n          // Break if no projects remaining.\n          if(imagesIndex === images.length) break;\n\n          columns[x].push(images[ imagesIndex ]);\n        }\n      }\n\n      return columns;\n    };\n\n    ctrl.imageThumbs = FormatImageList($scope.content);\n  }\n\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('imageLightbox', imageLightbox);\n\n  function imageLightbox(){\n    return{\n      restrict:'EA',\n      scope:{\n        content: '=content'\n      },\n      templateUrl: '/common/directives/imageLightbox/imageLightbox.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('navigationBar', navigationBar);\n\n  function navigationBar(){\n    return{\n      restrict:'EA',\n      templateUrl: '/common/directives/navigationBar/navigationBar.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('underlinePageBreak', underlinePageBreak);\n\n  function underlinePageBreak(){\n    return{\n      restrict:'EA',\n      templateUrl: '/common/directives/pageBreak/underline.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('textBlock', textBlock);\n\n  function textBlock(){\n    return{\n      restrict:'EA',\n      scope:{\n        content: '=content'\n      },\n      templateUrl: '/common/directives/textBlock/textBlock.directive.html'\n    };\n  }\n})();\n"],"sourceRoot":"/source/"}