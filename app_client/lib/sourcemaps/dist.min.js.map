{"version":3,"sources":["about/about.controller.js","app.js","home/home.controller.js","projectPage/projectPage.controller.js","common/services/projectsGallery.service.js","common/directives/coverImage/coverImage.directive.js","common/directives/embededVideo/embededVideo.directive.js","common/directives/imageGallery/imageGallery.directive.js","common/directives/imageLightbox/imageLightbox.directive.js","common/directives/navigationBar/navigationBar.directive.js","common/directives/pageBreak/underline.directive.js","common/directives/textBlock/textBlock.directive.js"],"names":["aboutController","$scope","viewModel","this","myVariable","config","$routeProvider","$locationProvider","when","templateUrl","controller","controllerAs","otherwise","redirectTo","html5Mode","angular","module","$inject","homeController","$window","$location","$sce","ProjectsGalleryService","currentProjectsCategoryFilter","search","category","showVideo","undefined","projects","GetProjects","element","bind","$apply","videoLink","trustAsResourceUrl","projectPageController","$routeParams","scrollTo","projectId","projectid","lightboxImage","text","otherVideoLink","coverImage","galleryThumbs","videos","position","type","source","textBlocks","coverImages","galleries","imageList","pageBreaks","blogItems","service","smallScreenMax","mediumScreenMax","allProjectsFilter","filmProjectsFilter","artProjectsFilter","console","error","projectsDto","id","name","image","aspect","filteredProjectsList","FilterProjectsByCategory","MapProjectsDtoToVm","filteredProjects","i","length","push","GetRowSize","rowSize","innerWidth","Array","isArray","projectRows","rows","projectsIndex","y","x","restrict","scope","content","directive","embededVideo","embededUrl","imageGallery","selectedImage","imageGalleryController","ctrl","GalleryThumbClick","log","imageThumbs","FormatImageList","GetNumberOfColumns","numCols","images","columns","numColumns","Math","ceil","imagesIndex","imageLightbox","navigationBar","underlinePageBreak","textBlock"],"mappings":"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","file":"dist.min.js","sourcesContent":["angular\n  .module('PortfolioSPAModule')\n  .controller('aboutController', aboutController);\n\naboutController.$inject = ['$scope'];\nfunction aboutController($scope){\n  var viewModel = this;\n\n  viewModel.myVariable = \"I'm pretty cool, I guess.\";\n}\n","/*\n* Angular application.\n*/\n\n(function(){\n\n  // Define the app module and it's dependencies.\n  angular.module('PortfolioSPAModule', ['ngRoute']);\n\n  // Create a config for our app -- configure our routes.\n  function config ($routeProvider, $locationProvider){\n    $routeProvider\n      .when('/', {\n        templateUrl: 'home/home.view.html',\n        controller: 'homeController',\n        controllerAs: 'viewModel'\n      })\n      .when('/about', {\n        templateUrl: 'about/about.view.html',\n        controller: 'aboutController',\n        controllerAs: 'viewModel'\n      })\n      .when('/projects/:projectid', {\n        templateUrl: 'projectPage/projectPage.view.html',\n        controller: 'projectPageController',\n        controllerAs: 'viewModel'\n      })\n      .otherwise({redirectTo: '/'});\n\n    // Pretty up URLs. Base defined in index.html.\n    $locationProvider.html5Mode(true);\n  }\n\n  // Add the config to our app.\n  angular\n    .module('PortfolioSPAModule')\n    .config(['$routeProvider', '$locationProvider', config]);\n\n})();\n","// Using function scopes to prevent global scope variables.\n// God, I can't wait to use typescript.\n(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .controller('homeController', homeController);\n\n  homeController.$inject = ['$scope', '$window', '$location', '$sce', 'ProjectsGalleryService'];\n  function homeController($scope, $window, $location, $sce, ProjectsGalleryService){\n    var viewModel = this;\n    var currentProjectsCategoryFilter = $location.search().category; // Once per 'page load'\n\n    viewModel.showVideo = currentProjectsCategoryFilter === undefined; // Promo on 'all' page.\n\n    // TODO: Make the main gallery a directive and pass projectRows into it.\n    viewModel.projects = ProjectsGalleryService.GetProjects(currentProjectsCategoryFilter);\n\n    // Turn into a service to return screen width and height.\n    // This service should have a method to just get num of rows that should display.\n    angular.element($window).bind('resize', function () {\n      // Possiblity to cache here... if necessary.\n      viewModel.projects = ProjectsGalleryService.GetProjects(currentProjectsCategoryFilter);\n      $scope.$apply(); // This is needed here... will occasionally update on its own.\n    });\n\n    viewModel.videoLink = $sce.trustAsResourceUrl(\"https://www.youtube.com/embed/CJ_GCPaKywg\");\n  }\n\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .controller('projectPageController', projectPageController);\n\n  projectPageController.$inject = ['$scope', '$sce', '$window', '$routeParams', 'ProjectsGalleryService'];\n  function projectPageController($scope, $sce, $window, $routeParams, ProjectsGalleryService){\n    var viewModel = this;\n\n    // Make sure we always start at the top of the page.\n    $window.scrollTo(0, 0);\n\n    viewModel.projectId = $routeParams.projectid;\n\n    viewModel.lightboxImage = \"BAD\";\n    viewModel.text = \"No mans sky is a diddy I worked on. This is a text block. No mans sky is a diddy I worked on. This is a text block. No mans sky is a diddy I worked on. This is a text block. No mans sky is a diddy I worked on. This is a text block. No mans sky is a diddy I worked on. This is a text block.\";\n    viewModel.videoLink = $sce.trustAsResourceUrl(\"https://www.youtube.com/embed/kF0FvsDNjrc\");\n    viewModel.otherVideoLink = $sce.trustAsResourceUrl(\"https://www.youtube.com/embed/CJ_GCPaKywg\");\n    viewModel.coverImage = \"/images/NoMan2.jpg\";\n    viewModel.galleryThumbs = [\n        \"/images/NoMan1.jpg\",\n        \"/images/NoMan2.jpg\",\n        \"/images/NoMan3.jpg\",\n        \"/images/NoMan4.jpg\",\n        \"/images/NoMan5.jpeg\",\n        \"/images/NoMan6.jpg\",\n        \"/images/LastOf1.jpg\",\n        \"/images/LastOf2.jpg\",\n        \"/images/LastOf3.jpg\",\n        \"/images/LastOf4.jpg\",\n        \"/images/LastOf5.jpg\",\n        \"/images/LastOf6.jpg\",\n        \"/images/LastOf7.jpg\",\n        \"/images/LastOf8.jpg\"\n    ];\n\n    // Each element will likely have to be it's own schema, so we'll have different\n    // arrays of each schema type.\n    // Our service should fetch this raw data, then sort it by position (put all objects\n    // of each type into one array, then sort by position).\n    // The final array returned by our service should match blog items below.\n    // As a bonus, Jorge will be able to update the position value for any of these.\n    var originalDataFromService = {\n      \"videos\": [\n        {\n          \"position\": 1,\n          \"type\": \"video\",\n          \"source\": viewModel.videoLink\n        }\n      ],\n      \"textBlocks\": [\n        {\n          \"position\": 2,\n          \"type\": \"text\",\n          \"text\": viewModel.text\n        },\n        {\n          \"position\": 7,\n          \"type\": \"text\",\n          \"text\": viewModel.text\n        }\n      ],\n      \"coverImages\": [\n        {\n          \"position\": 4,\n          \"type\": \"coverImage\",\n          \"source\": viewModel.coverImage\n        }\n      ],\n      \"galleries\": [\n        {\n          \"position\": 5,\n          \"type\": \"gallery\",\n          \"imageList\": viewModel.galleryThumbs\n        },\n        {\n          \"position\": 8,\n          \"type\": \"gallery\",\n          \"imageList\": viewModel.galleryThumbs\n        }\n      ],\n      \"pageBreaks\": [\n        {\n          \"position\": 3,\n          \"type\": \"pageBreak\"\n        },\n        {\n          \"position\": 6,\n          \"type\": \"pageBreak\"\n        }\n      ]\n    };\n\n    // Ideally Project in database will contain this pageData, as well as\n    // an id and a coverSource, aspect, name, and category\n    viewModel.blogItems = [\n      {\n        \"position\": 1,\n        \"type\": \"video\",\n        \"source\": viewModel.videoLink\n      },\n      {\n        \"position\": 2,\n        \"type\": \"text\",\n        \"text\": viewModel.text\n      },\n      {\n        \"position\": 3,\n        \"type\": \"pageBreak\"\n      },\n      {\n        \"position\": 4,\n        \"type\": \"coverImage\",\n        \"source\": viewModel.coverImage\n      },\n      {\n        \"position\": 5,\n        \"type\": \"gallery\",\n        \"imageList\": viewModel.galleryThumbs\n      },\n      {\n        \"position\": 6,\n        \"type\": \"pageBreak\"\n      },\n      {\n        \"position\": 7,\n        \"type\": \"text\",\n        \"text\": viewModel.text\n      },\n      {\n        \"position\": 8,\n        \"type\": \"gallery\",\n        \"imageList\": viewModel.galleryThumbs\n      }\n    ];\n  }\n\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .service('ProjectsGalleryService', ProjectsGalleryService);\n\n\n\n  ProjectsGalleryService.$inject = ['$window'];\n  function ProjectsGalleryService($window){\n    var service = this;\n\n    var smallScreenMax = 900;\n    var mediumScreenMax = 1500;\n\n    service.allProjectsFilter = undefined;\n    service.filmProjectsFilter = \"film\";\n    service.artProjectsFilter = \"art\";\n\n    ///\n    /// Call out to our API to get projects.\n    /// Filtr them by the appropriate category.\n    /// Organize them into rows according to screen size.\n    ///\n    service.GetProjects = function(category){\n\n      if(category !== service.allProjectsFilter &&\n        category !== service.filmProjectsFilter &&\n        category !== service.artProjectsFilter){\n          console.error(\"Invalid category provided: \" + category);\n          return;\n      }\n\n      // Get aspect ratio and store in db when uploaded.\n      // Replace with $http call.\n      // build another document of data consisting of specific project page.. all\n      // the blog components.\n      var projectsDto = [\n        {\n          \"id\": \"100\", // use this to navigate to specific project url\n          \"name\": \"NoMansSky\", // could be useful\n          \"image\": \"/images/NoMan1.jpg\",\n          \"aspect\": 0.665,\n          \"category\": \"film\"\n        },\n        {\n          \"id\": \"101\",\n          \"name\": \"NoMansSky2\",\n          \"image\": \"/images/NoMan2.jpg\",\n          \"aspect\": 1.78,\n          \"category\": \"art\"\n        },\n        {\n          \"id\": \"102\",\n          \"name\": \"NoMansSky3\",\n          \"image\": \"/images/NoMan3.jpg\",\n          \"aspect\": 1.77,\n          \"category\": \"art\"\n        },\n        {\n          \"id\": \"103\",\n          \"name\": \"NoMansSky4\",\n          \"image\": \"/images/NoMan4.jpg\",\n          \"aspect\": 1.77,\n          \"category\": \"art\"\n        },\n        {\n          \"id\": \"104\",\n          \"name\": \"NoMansSky5\",\n          \"image\": \"/images/NoMan5.jpeg\",\n          \"aspect\": 1.777,\n          \"category\": \"art\"\n        },\n        {\n          \"id\": \"105\",\n          \"name\": \"NoMansSky6\",\n          \"image\": \"/images/NoMan6.jpg\",\n          \"aspect\": 1.77,\n          \"category\": \"film\"\n        }\n      ];\n\n      var filteredProjectsList = FilterProjectsByCategory(projectsDto, category);\n      return service.MapProjectsDtoToVm(filteredProjectsList);\n    };\n\n    ///\n    /// Filter the projects by the provided category.\n    ///\n    var FilterProjectsByCategory = function(projects, category){\n      var filteredProjects = [];\n\n      if(category === service.allProjectsFilter){\n        return projects;\n      }\n\n      for(var i = 0; i < projects.length; i++){\n        // If the project category matches, add it to our results.\n        if(projects[i].category === category){\n          filteredProjects.push(projects[i]);\n        }\n      }\n\n      return filteredProjects;\n    };\n\n    ///\n    /// Get the number of projects we want to show in a row based on how\n    /// big the screen is.\n    ///\n    var GetRowSize = function(){\n      var rowSize = 1;\n\n      if($window.innerWidth > smallScreenMax){\n        rowSize = 2;\n      }\n\n      if($window.innerWidth > mediumScreenMax){\n        rowSize = 3;\n      }\n\n      return rowSize;\n    };\n\n    ///\n    /// Take an array of projects and map them to a 2D array of relevent\n    /// project info to be used by the view.\n    ///\n    service.MapProjectsDtoToVm = function(projects){\n      if(projects === undefined){\n        console.error(\"projects is undefined.\");\n        return;\n      }\n\n      if(projects.length === 0){\n        console.error(\"No projects in the projects array.\");\n        return;\n      }\n\n      if(Array.isArray(projects) === false){\n        console.error(\"Array of projects not provided.\");\n        return;\n      }\n\n      var rowSize = GetRowSize();\n      var projectRows = [];\n      var rows = projects.length / rowSize;\n\n      if(rows === 0) rows = 1;\n\n      var projectsIndex = 0;\n      for (var y = 0; y < rows; y++) {\n        projectRows.push([]);\n\n        for(var x = 0; x < rowSize; x++, projectsIndex++){\n          // Break if no projects remaining.\n          if(projectsIndex === projects.length) break;\n\n          projectRows[y].push(projects[ projectsIndex ]);\n        }\n      }\n\n      return projectRows;\n    };\n\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('coverImage', coverImage);\n\n  function coverImage(){\n    return{\n      restrict:'EA',\n      scope:{\n        content: '=content'\n      },\n      templateUrl: '/common/directives/coverImage/coverImage.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('embededVideo', embededVideo);\n\n  function embededVideo(){\n    return{\n      restrict:'EA',\n      scope:{\n        embededUrl: '=embededUrl'\n      },\n      templateUrl: '/common/directives/embededVideo/embededVideo.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .controller('imageGalleryController', imageGalleryController)\n    .directive('imageGallery', imageGallery);\n\n  function imageGallery(){\n    return{\n      restrict:'EA',\n      scope:{\n        content: '=content',\n        selectedImage: '=selectedImage'\n      },\n      templateUrl: '/common/directives/imageGallery/imageGallery.directive.html',\n      controller: imageGalleryController,\n      controllerAs: 'ctrl'\n    };\n  }\n\n  ///\n  /// Define a controller for this image gallery to use.\n  ///\n  imageGalleryController.$inject = ['$scope', '$window'];\n  function imageGalleryController($scope, $window){\n    var ctrl = this;\n    var tinyScreenMax = 600;\n    var smallScreenMax = 650;\n    var mediumScreenMax = 1000;\n    // Never really want more than 4 columns or balance starts to look shit.\n    ctrl.lightboxImage = \"\";\n\n    ctrl.GalleryThumbClick = function(image){\n      // Set modal image\n      $scope.selectedImage = image;\n    };\n\n    angular.element($window).bind('resize', function () {\n      console.log(\"resizing\");\n      // Possiblity to cache here... if necessary.\n      ctrl.imageThumbs = FormatImageList($scope.content); // format images with new number of columns based on screen size.\n      $scope.$apply(); // This is needed here... will occasionally update on its own.\n    });\n\n    var GetNumberOfColumns = function(){\n      var numCols = 2;\n\n      //if($window.innerWidth > tinyScreenMax){\n        numCols = 2;\n      //}\n      if($window.innerWidth > smallScreenMax){\n        numCols = 3;\n      }\n      if($window.innerWidth > mediumScreenMax){\n        numCols = 4;\n      }\n\n      return numCols;\n    };\n\n    var FormatImageList = function(images){\n      var columns = [];\n      var numColumns = GetNumberOfColumns();\n      var rows = Math.ceil(images.length / numColumns);\n\n      var imagesIndex = 0;\n      for (var y = 0; y < rows; y++) {\n        for(var x = 0; x < numColumns; x++, imagesIndex++){\n          if(columns[x] === undefined){\n            columns.push([]);\n          }\n\n          // Break if no projects remaining.\n          if(imagesIndex === images.length) break;\n\n          columns[x].push(images[ imagesIndex ]);\n        }\n      }\n\n      return columns;\n    };\n\n    ctrl.imageThumbs = FormatImageList($scope.content);\n  }\n\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('imageLightbox', imageLightbox);\n\n  function imageLightbox(){\n    return{\n      restrict:'EA',\n      scope:{\n        content: '=content'\n      },\n      templateUrl: '/common/directives/imageLightbox/imageLightbox.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('navigationBar', navigationBar);\n\n  function navigationBar(){\n    return{\n      restrict:'EA',\n      templateUrl: '/common/directives/navigationBar/navigationBar.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('underlinePageBreak', underlinePageBreak);\n\n  function underlinePageBreak(){\n    return{\n      restrict:'EA',\n      templateUrl: '/common/directives/pageBreak/underline.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('textBlock', textBlock);\n\n  function textBlock(){\n    return{\n      restrict:'EA',\n      scope:{\n        content: '=content'\n      },\n      templateUrl: '/common/directives/textBlock/textBlock.directive.html'\n    };\n  }\n})();\n"],"sourceRoot":"/source/"}