{"version":3,"sources":["about/about.controller.js","login/login.controller.js","app.js","home/home.controller.js","projectPage/projectPage.controller.js","admin/dashboard/dashboard.controller.js","admin/newProject/newProject.controller.js","common/services/authentication.service.js","common/services/dataMappingService.js","common/services/projectsService.js","common/services/responsiveService.js","common/services/upload.service.js","common/directives/fileModel/fileModel.directive.js","common/directives/adminHeader/adminHeader.directive.js","common/directives/embededVideo/embededVideo.directive.js","common/directives/coverImage/coverImage.directive.js","common/directives/imageGallery/imageGallery.directive.js","common/directives/imageLightbox/imageLightbox.directive.js","common/directives/navigationBar/navigationBar.directive.js","common/directives/pageBreak/underline.directive.js","common/directives/textBlock/textBlock.directive.js"],"names":["aboutController","$scope","viewModel","this","myVariable","loginCtrl","$location","AuthentictionService","pageHeader","title","credentials","username","password","returnPage","onSubmit","formError","doLogin","login","error","err","message","then","path","config","$routeProvider","$locationProvider","when","templateUrl","controller","controllerAs","otherwise","redirectTo","html5Mode","angular","module","$inject","homeController","$window","$sce","ProjectsService","categoryFilter","search","category","videoLink","trustAsResourceUrl","showVideo","undefined","GetProjectsHomePage","projectsVm","projects","element","bind","projectPageController","$routeParams","project","projectId","projectid","scrollTo","GetProject","GetProjectPage","pageData","blogItems","nextProject","GetAllProjects","i","length","_id","previousProject","dashboardController","$http","projectToDelete","isLoggedIn","markForDelete","index","deleteProject","headers","Authorization","getToken","response","console","newProjectController","UploadService","isNew","absUrl","indexOf","formMessageHeader","created","newProject","fileData","createProject","projectCoverImageAspectRatio","getAspectRatio","post","data","editProject","put","uploadProjectCoverImage","uploadImage","projectCoverImage","filepath","log","uploadBlogItemCoverImage","pageItems","content","uploadToGallery","contentArray","push","addNewPageItem","position","removePageItem","splice","resetProject","elementQuery","screenImage","$","theImage","Image","src","attr","aspect","width","height","saveToken","token","localStorage","user","success","logout","removeItem","payload","JSON","parse","atob","split","exp","Date","now","service","DataMappingService","ResponsiveService","MapProjectDataToProjectPageVm","sort","a","b","type","MapProjectsDataToHomePageVm","Array","isArray","rowSize","GetHomePageRowSize","projectRows","rows","projectsIndex","y","x","allProjectsFilter","designProjectsFilter","animationProjectsFilter","illustrationProjectsFilter","artworkProjectsFilter","miscProjectsFilter","callback","get","status","filteredProjectsList","FilterProjectsByCategory","mapped","filteredProjects","smallScreenMax","mediumScreenMax","innerWidth","successCB","errorCB","fd","FormData","append","transformRequest","identity","Content-Type","fileModel","$parse","restrict","link","scope","attrs","model","modelSetter","assign","$apply","files","directive","adminHeader","adminHeaderController","embededVideo","embededUrl","coverImage","imageGallery","selectedImage","imageGalleryController","ctrl","lightboxImage","GalleryThumbClick","image","imageThumbs","FormatImageList","GetNumberOfColumns","numCols","images","columns","numColumns","Math","ceil","imagesIndex","imageLightbox","imageLightboxController","imageWidth","document","ready","on","find","css","navigationBar","navigationBarController","isActive","underlinePageBreak","textBlock"],"mappings":"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","file":"dist.min.js","sourcesContent":["angular\n  .module('PortfolioSPAModule')\n  .controller('aboutController', aboutController);\n\naboutController.$inject = ['$scope'];\nfunction aboutController($scope){\n  var viewModel = this;\n\n  viewModel.myVariable = \"I'm pretty cool, I guess.\";\n}\n","angular\n  .module('PortfolioSPAModule')\n  .controller('loginCtrl', loginCtrl);\n\nloginCtrl.$inject = ['$location', 'AuthentictionService'];\nfunction loginCtrl($location, AuthentictionService){\n  var viewModel = this;\n\n  viewModel.pageHeader = {\n    title: 'Admin Sign In'\n  };\n\n  viewModel.credentials = {\n    username: \"\",\n    password: \"\"\n  };\n\n  viewModel.returnPage = '/admin'; // Go to admin page once logged in.\n  viewModel.onSubmit = function(){\n    viewModel.formError = \"\";\n    if(!viewModel.credentials.username || !viewModel.credentials.password){\n      viewModel.formError = \"All fields required.\";\n      return false;\n    }\n    else{\n      viewModel.doLogin();\n    }\n  };\n\n  viewModel.doLogin = function(){\n    viewModel.formError = \"\";\n    AuthentictionService\n      .login(viewModel.credentials)\n      .error(function(err){\n        viewModel.formError = err.message;\n      })\n      .then(function(){\n        //$location.search('page', null); no need to get query param for return page.\n        $location.path(viewModel.returnPage);\n      });\n  };\n}\n","/*\n* Angular application.\n*/\n\n(function(){\n\n  // Define the app module and it's dependencies.\n  angular.module('PortfolioSPAModule', ['ngRoute']);\n\n  // Create a config for our app -- configure our routes.\n  function config ($routeProvider, $locationProvider){\n    $routeProvider\n      .when('/', {\n        templateUrl: 'home/home.view.html',\n        controller: 'homeController',\n        controllerAs: 'viewModel'\n      })\n      .when('/about', {\n        templateUrl: 'about/about.view.html',\n        controller: 'aboutController',\n        controllerAs: 'viewModel'\n      })\n      .when('/projects/:projectid', {\n        templateUrl: 'projectPage/projectPage.view.html',\n        controller: 'projectPageController',\n        controllerAs: 'viewModel'\n      })\n      .when('/login', {\n        templateUrl: '/login/login.view.html',\n        controller: 'loginCtrl',\n        controllerAs: 'viewModel'\n      })\n      .when('/admin', {\n        templateUrl: '/admin/dashboard/dashboard.view.html',\n        controller: 'dashboardController',\n        controllerAs: 'viewModel'\n      })\n      .when('/admin/edit/:projectid', {\n        templateUrl: '/admin/newProject/newProject.view.html',\n        controller: 'newProjectController',\n        controllerAs: 'viewModel'\n      })\n      .when('/admin/newProject', {\n        templateUrl: '/admin/newProject/newProject.view.html',\n        controller: 'newProjectController',\n        controllerAs: 'viewModel'\n      })\n      .otherwise({redirectTo: '/'});\n\n    // Pretty up URLs. Base defined in index.html.\n    $locationProvider.html5Mode(true);\n  }\n\n  // Add the config to our app.\n  angular\n    .module('PortfolioSPAModule')\n    .config(['$routeProvider', '$locationProvider', config]);\n\n})();\n","// Using function scopes to prevent global scope variables.\n// God, I can't wait to use typescript.\n(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .controller('homeController', homeController);\n\n  homeController.$inject = ['$scope', '$window', '$location', '$sce', 'ProjectsService'];\n  function homeController($scope, $window, $location, $sce, ProjectsService){\n    var viewModel = this;\n    var categoryFilter = $location.search().category; // Once per 'page load'\n\n    viewModel.videoLink = $sce.trustAsResourceUrl(\"https://www.youtube.com/embed/CJ_GCPaKywg\");\n    viewModel.showVideo = categoryFilter === undefined; // Promo on 'all' page.\n\n    ///\n    /// Request the projects to disply on the home page.\n    ///\n    ProjectsService.GetProjectsHomePage(categoryFilter, function(projectsVm){\n      viewModel.projects = projectsVm;\n    });\n\n    ///\n    /// Re-get the projects if page is resized (getting projects will rebuild the rows\n    /// according to screen size).\n    /// TODO: Only get projects when resizing is done so we're not making a million calls.\n    ///\n    angular.element($window).bind('resize', function () {\n      // Possiblity to cache here... if necessary.\n      ProjectsService.GetProjectsHomePage(categoryFilter, function(projectsVm){\n        viewModel.projects = projectsVm;\n        //$scope.$apply(); // Not needed... two way bind automatically digests.\n      });\n    });\n  }\n\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .controller('projectPageController', projectPageController);\n\n  projectPageController.$inject = ['$window', '$routeParams', '$location', 'ProjectsService'];\n  function projectPageController($window, $routeParams, $location, ProjectsService){\n    var viewModel = this;\n    viewModel.project = {};\n\n    viewModel.projectId = $routeParams.projectid;\n\n    // Make sure we always start at the top of the page.\n    $window.scrollTo(0, 0);\n\n    ProjectsService.GetProject(viewModel.projectId, function(project){\n      viewModel.project = project;\n    });\n\n    ProjectsService.GetProjectPage($routeParams.projectid, function(pageData){\n      viewModel.blogItems = pageData;\n    });\n\n    viewModel.nextProject = function(){\n      ProjectsService.GetAllProjects(function(projects){\n        var i = 0;\n        for(; i < projects.length; i++){\n          if(projects[i]._id === viewModel.project._id){\n            break;\n          }\n        }\n\n        if(i === projects.length - 1){\n          i = -1;\n        }\n\n        $location.path('/projects/' + projects[i + 1]._id);\n      });\n    };\n\n    viewModel.previousProject = function(){\n      ProjectsService.GetAllProjects(function(projects){\n        var i = 0;\n        for(; i < projects.length; i++){\n          if(projects[i]._id === viewModel.project._id){\n            break;\n          }\n        }\n\n        if(i === 0){\n          i = projects.length;\n        }\n\n        $location.path('/projects/' + projects[i - 1]._id);\n      });\n    };\n  }\n\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .controller('dashboardController', dashboardController);\n\n  dashboardController.$inject = ['$scope', '$location', '$http', 'ProjectsService', 'AuthentictionService'];\n  function dashboardController($scope, $location, $http, ProjectsService, AuthentictionService){\n\n    var viewModel = this;\n    viewModel.projects = [];\n    viewModel.projectToDelete = {};\n\n    // Immediatelly check if a user is logged in, otherwise leave.\n    if(AuthentictionService.isLoggedIn() === false){\n      $location.path('/login');\n    }\n\n    ///\n    /// Request the projects to disply on the home page.\n    ///\n    ProjectsService.GetAllProjects(function(projects){\n      viewModel.projects = projects;\n    });\n\n    viewModel.markForDelete = function(index){\n      viewModel.projectToDelete = viewModel.projects[index];\n    };\n\n    viewModel.deleteProject = function(){\n      $http.delete('/api/projects/' + viewModel.projectToDelete._id, {\n        headers: {\n          Authorization: 'Bearer ' + AuthentictionService.getToken()\n        }\n      }).then(\n        function(response){\n\n          // Refresh projects list.\n          ProjectsService.GetAllProjects(function(projects){\n            viewModel.projects = projects;\n          });\n        },\n        function(response){\n          console.err(\"Something went wrong deleting a profile.\");\n      });\n    };\n  }\n\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .controller('newProjectController', newProjectController);\n\n  newProjectController.$inject = ['$scope', '$location', '$http', '$routeParams', 'AuthentictionService', 'UploadService' ,'ProjectsService'];\n  function newProjectController($scope, $location, $http, $routeParams, AuthentictionService, UploadService, ProjectsService){\n    var viewModel = this;\n\n    // Immediatelly check if a user is logged in, otherwise leave.\n    if(AuthentictionService.isLoggedIn() === false){\n      $location.path('/login');\n    }\n\n    viewModel.isNew = false;\n    if($location.absUrl().indexOf('newProject') > -1){\n      viewModel.isNew = true;\n    }\n\n    viewModel.formMessageHeader = \"\";\n    viewModel.formError = \"\";\n    viewModel.created = false;\n    viewModel.newProject = {};\n    viewModel.fileData = {};\n\n    ///\n    /// Initialize variables if we're editing\n    ///\n    if(viewModel.isNew === false){\n      var projectid = $routeParams.projectid;\n      ProjectsService.GetProject(projectid, function(project){\n        viewModel.newProject = project;\n      });\n    }\n\n    ///\n    /// Add the project to our db.\n    ///\n    viewModel.createProject = function(){\n\n      viewModel.newProject.projectCoverImageAspectRatio = getAspectRatio(\"#projectCoverImage\");\n\n      $http.post('/api/projects', viewModel.newProject, {\n        headers: {\n          Authorization: 'Bearer ' + AuthentictionService.getToken()\n        }\n      }).then(\n        function(response){\n          viewModel.formMessageHeader = \"Success!\";\n          viewModel.formError = \"Project created.\";\n          viewModel.created = true;\n          $location.path('/admin');\n        },\n        function(response){\n          viewModel.formMessageHeader = \"Oops!\";\n          viewModel.formError = \"Something went wrong trying to create project. \" + response.data;\n          viewModel.created = false;\n        }\n      );\n    };\n\n    viewModel.editProject = function(){\n      var projectid = $routeParams.projectid;\n\n      viewModel.newProject.projectCoverImageAspectRatio = getAspectRatio('#projectCoverImage');\n\n      $http.put('/api/projects/' + projectid, viewModel.newProject, {\n        headers: {\n          Authorization: 'Bearer ' + AuthentictionService.getToken()\n        }\n      }).then(\n        function(response){\n          viewModel.formMessageHeader = \"Success!\";\n          viewModel.formError = \"Project updated.\";\n          viewModel.created = true;\n          $location.path('/admin');\n        },\n        function(response){\n          viewModel.formMessageHeader = \"Oops!\";\n          viewModel.formError = \"Something went wrong trying to save this project. \" + response.data;\n          viewModel.created = false;\n      });\n    };\n\n    viewModel.uploadProjectCoverImage = function(){\n      UploadService.uploadImage(viewModel.newProject.projectCoverImage,\n        function(response){\n          viewModel.newProject.projectCoverImage = response.filepath;\n        },\n        function(response){\n          console.log(\"something went wrong trying to upload file.\");\n      });\n    };\n\n    viewModel.uploadBlogItemCoverImage = function(index){\n      UploadService.uploadImage(viewModel.newProject.pageItems[index].content,\n        function(response){\n          viewModel.newProject.pageItems[index].content = response.filepath;\n        },\n        function(response){\n          console.log(\"something went wrong trying to upload file.\");\n      });\n    };\n\n    viewModel.uploadToGallery = function(index){\n      UploadService.uploadImage(viewModel.fileData,\n        function(response){\n          viewModel.newProject.pageItems[index].contentArray.push(response.filepath);\n        },\n        function(response){\n          console.log(\"something went wrong trying to upload file.\");\n      });\n    };\n\n    viewModel.addNewPageItem = function(){\n      if(viewModel.newProject.pageItems === undefined){\n        viewModel.newProject.pageItems = [];\n      }\n\n      viewModel.newProject.pageItems.push({\n        position: 0,\n        content: \"\",\n        contentArray: []\n      });\n    };\n\n    viewModel.removePageItem = function(index){\n      viewModel.newProject.pageItems.splice(index, 1);\n    };\n\n    viewModel.resetProject = function(){\n      viewModel.newProject = {};\n    };\n\n    var getAspectRatio = function(elementQuery){\n      var screenImage = $(\"#projectCoverImage\");\n      var theImage = new Image();\n      theImage.src = screenImage.attr(\"src\");\n\n      var aspect = theImage.width / theImage.height;\n\n      return aspect;\n    };\n  }\n\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .service('AuthentictionService', AuthentictionService);\n\n    AuthentictionService.$inject = ['$window', '$http'];\n    function AuthentictionService($window, $http){\n      var saveToken = function(token){\n        $window.localStorage['admin-token'] = token;\n      };\n\n      var getToken = function(){\n        return $window.localStorage['admin-token'];\n      };\n\n      var login = function(user){\n        return $http.post('/api/login', user).success(function(data){\n          saveToken(data.token);\n        });\n      };\n\n      var logout = function(){\n        $window.localStorage.removeItem('admin-token');\n      };\n\n      var isLoggedIn = function(){\n        var token = getToken();\n\n        if(token){\n          var payload = JSON.parse($window.atob(token.split('.')[1]));\n\n          return payload.exp > Date.now() / 1000;\n        }\n        else{\n          return false;\n        }\n      };\n\n      var currentUser = function(){\n        if(isLoggedIn()){\n          var token = getToken();\n          var payload = JSON.parse($window.atob(token.split('.')[1]));\n          return {\n            username: payload.username\n          };\n        }\n      };\n\n      return {\n        login: login,\n        logout: logout,\n        isLoggedIn: isLoggedIn,\n        saveToken: saveToken,\n        getToken: getToken\n      };\n    }\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .service('DataMappingService', DataMappingService);\n\n  DataMappingService.$inject = ['$sce', 'ResponsiveService'];\n  function DataMappingService($sce, ResponsiveService){\n    var service = this;\n\n    ///\n    /// Map the data returned by a project page to its view model.\n    ///\n     service.MapProjectDataToProjectPageVm = function(data){\n      var blogItems = data.pageItems;\n\n      // Sort the list by position\n      blogItems.sort(function(a, b) {\n        return a.position > b.position;\n      });\n\n      // Trust all video links as secure.\n      for(var i = 0; i < data.pageItems.length; i++){\n        if(data.pageItems[i].type === \"video\"){\n          data.pageItems[i].content = $sce.trustAsResourceUrl(data.pageItems[i].content);\n        }\n      }\n\n      return blogItems;\n    };\n\n    ///\n    /// Take an array of projects and map them to a 2D array of relevent\n    /// project info to be used by the view.\n    ///\n    service.MapProjectsDataToHomePageVm = function(projects){\n      if(projects === undefined){\n        console.error(\"projects is undefined.\");\n        return;\n      }\n\n      if(projects.length === 0){\n        console.error(\"No projects in the projects array.\");\n        return;\n      }\n\n      if(Array.isArray(projects) === false){\n        console.error(\"Array of projects not provided.\");\n        return;\n      }\n\n      projects.sort(function(a, b) {\n        return a.position > b.position;\n      });\n\n      var rowSize = ResponsiveService.GetHomePageRowSize();\n      var projectRows = [];\n      var rows = projects.length / rowSize;\n\n      if(rows === 0) rows = 1;\n\n      var projectsIndex = 0;\n      for (var y = 0; y < rows; y++) {\n        projectRows.push([]);\n\n        for(var x = 0; x < rowSize; x++, projectsIndex++){\n          // Break if no projects remaining.\n          if(projectsIndex === projects.length) break;\n\n          projectRows[y].push(projects[ projectsIndex ]);\n        }\n\n        // If only one item in row, full size.\n        if(projectRows[y].length === 1){\n          projectRows[y][0].projectCoverImageAspectRatio = 1;\n        }\n      }\n\n      return projectRows;\n    };\n\n  }\n\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .service('ProjectsService', ProjectsService);\n\n  ProjectsService.$inject = ['$sce', '$http', 'DataMappingService'];\n  function ProjectsService($sce, $http, DataMappingService){\n    var service = this;\n\n    service.allProjectsFilter = undefined;\n    service.designProjectsFilter = \"design\";\n    service.animationProjectsFilter = \"animation\";\n    service.illustrationProjectsFilter = \"illustration\";\n    service.artworkProjectsFilter = \"artwork\";\n    service.miscProjectsFilter = \"misc\";\n\n    ///\n    /// Get all the projects raw data\n    ///\n    service.GetAllProjects = function(callback){\n      $http.get('/api/projects/').then(\n        function(response){\n          if(response.status === 200){\n\n            response.data.sort(function(a, b) {\n              return a.position > b.position;\n            });\n\n            callback(response.data);\n          }\n        },\n        function(response){\n          console.error(\"Something went wrong getting all projects.\");\n          // TODO: Redirect to 404 not found.\n      });\n    };\n\n    ///\n    /// Get a project by its id.\n    ///\n    service.GetProject = function(projectId, callback){\n\n      $http.get('/api/projects/' + projectId).then(\n        function(response){\n          if(response.status === 200){\n            callback(response.data);\n          }\n        },\n        function(response){\n          console.error(\"Something went wrong getting project page \" + projectId);\n          // TODO: Redirect to 404 not found.\n      });\n    };\n\n    ///\n    /// Get a project page by its id.\n    ///\n    service.GetProjectPage = function(projectId, callback){\n\n      $http.get('/api/projects/' + projectId).then(\n        function(response){\n          if(response.status === 200){\n            callback(DataMappingService.MapProjectDataToProjectPageVm(response.data));\n          }\n        },\n        function(response){\n          console.error(\"Something went wrong getting project page \" + projectId);\n          // TODO: Redirect to 404 not found.\n      });\n    };\n\n    ///\n    /// Get all projects as they are needed on the home page.\n    ///\n    service.GetProjectsHomePage = function(category, callback){\n\n      $http.get('/api/projects/').then(\n        function(response){\n          if(response.status === 200){\n            var filteredProjectsList = FilterProjectsByCategory(response.data, category);\n            var mapped =  DataMappingService.MapProjectsDataToHomePageVm(filteredProjectsList);\n\n            callback(mapped);\n          }\n        },\n        function(response){\n          console.log(\"Something went wrong while getting all projects.\");\n      });\n    };\n\n    ///\n    /// Filter the projects by the provided category.\n    ///\n    var FilterProjectsByCategory = function(projects, category){\n      var filteredProjects = [];\n\n      if(category === service.allProjectsFilter){\n        return projects;\n      }\n\n      for(var i = 0; i < projects.length; i++){\n        // If the project category matches, add it to our results.\n        if(projects[i].category === category){\n          filteredProjects.push(projects[i]);\n        }\n      }\n\n      return filteredProjects;\n    };\n  }\n\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .service('ResponsiveService', ResponsiveService);\n\n  ResponsiveService.$inject = ['$window'];\n  function ResponsiveService($window){\n    var service = this;\n\n    var smallScreenMax = 900;\n    var mediumScreenMax = 1500;\n\n    ///\n    /// Get the number of projects we want to show in a row based on how\n    /// big the screen is.\n    ///\n    service.GetHomePageRowSize = function(){\n      var rowSize = 1;\n\n      if($window.innerWidth > smallScreenMax){\n        rowSize = 2;\n      }\n\n      if($window.innerWidth > mediumScreenMax){\n        rowSize = 3;\n      }\n\n      return rowSize;\n    };\n  }\n\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .service('UploadService', UploadService);\n\n    UploadService.$inject = ['$http', 'AuthentictionService'];\n    function UploadService($http, AuthentictionService){\n      service = this;\n\n      service.uploadImage = function(fileData, successCB, errorCB){\n\n        var fd = new FormData();\n        fd.append('file', fileData);\n        $http.post(\"/api/upload\", fd, {\n            transformRequest: angular.identity,\n            headers: {\n              'Content-Type': undefined,\n              Authorization: 'Bearer ' + AuthentictionService.getToken()\n            }\n        })\n        .success(function(response){\n          successCB(response);\n        })\n        .error(function(response){\n          errorCB(response);\n        });\n      };\n\n    }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('fileModel', ['$parse', fileModel]);\n\n  function fileModel($parse){\n    return{\n      restrict:'A',\n      link: function(scope, element, attrs){\n        var model = $parse(attrs.fileModel);\n        var modelSetter = model.assign;\n\n        element.bind('change', function(){\n          scope.$apply(function(){\n            modelSetter(scope, element[0].files[0]);\n          });\n        });\n      }\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('adminHeader', adminHeader);\n\n  function adminHeader(){\n    return{\n      restrict:'EA',\n      templateUrl: '/common/directives/adminHeader/adminHeader.directive.html',\n      scope:{\n        title: '@title'\n      },\n      controller: adminHeaderController,\n      controllerAs: 'viewModel'\n    };\n  }\n\n  ///\n  /// Define a controller for this image gallery to use.\n  ///\n  adminHeaderController.$inject = ['$location', 'AuthentictionService'];\n  function adminHeaderController($location, AuthentictionService){\n    var viewModel = this;\n\n    viewModel.logout = function(){\n      AuthentictionService.logout();\n      $location.path('/');\n    };\n  }\n\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('embededVideo', embededVideo);\n\n  function embededVideo(){\n    return{\n      restrict:'EA',\n      scope:{\n        embededUrl: '=embededUrl'\n      },\n      templateUrl: '/common/directives/embededVideo/embededVideo.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('coverImage', coverImage);\n\n  function coverImage(){\n    return{\n      restrict:'EA',\n      scope:{\n        content: '=content'\n      },\n      templateUrl: '/common/directives/coverImage/coverImage.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .controller('imageGalleryController', imageGalleryController)\n    .directive('imageGallery', imageGallery);\n\n  function imageGallery(){\n    return{\n      restrict:'EA',\n      scope:{\n        content: '=content',\n        selectedImage: '=selectedImage'\n      },\n      templateUrl: '/common/directives/imageGallery/imageGallery.directive.html',\n      controller: imageGalleryController,\n      controllerAs: 'ctrl'\n    };\n  }\n\n  ///\n  /// Define a controller for this image gallery to use.\n  ///\n  imageGalleryController.$inject = ['$scope', '$window'];\n  function imageGalleryController($scope, $window){\n    var ctrl = this;\n    var tinyScreenMax = 600;\n    var smallScreenMax = 650;\n    var mediumScreenMax = 1000;\n    // Never really want more than 4 columns or balance starts to look shit.\n    ctrl.lightboxImage = \"\";\n\n    ctrl.GalleryThumbClick = function(image){\n      // Set modal image\n      $scope.selectedImage = image;\n    };\n\n    angular.element($window).bind('resize', function () {\n      console.log(\"resizing\");\n      // Possiblity to cache here... if necessary.\n      ctrl.imageThumbs = FormatImageList($scope.content); // format images with new number of columns based on screen size.\n      $scope.$apply(); // This is needed here... will occasionally update on its own.\n    });\n\n    var GetNumberOfColumns = function(){\n      var numCols = 2;\n\n      //if($window.innerWidth > tinyScreenMax){\n        numCols = 2;\n      //}\n      if($window.innerWidth > smallScreenMax){\n        numCols = 3;\n      }\n      if($window.innerWidth > mediumScreenMax){\n        numCols = 4;\n      }\n\n      return numCols;\n    };\n\n    var FormatImageList = function(images){\n      var columns = [];\n      var numColumns = GetNumberOfColumns();\n      var rows = Math.ceil(images.length / numColumns);\n\n      var imagesIndex = 0;\n      for (var y = 0; y < rows; y++) {\n        for(var x = 0; x < numColumns; x++, imagesIndex++){\n          if(columns[x] === undefined){\n            columns.push([]);\n          }\n\n          // Break if no projects remaining.\n          if(imagesIndex === images.length) break;\n\n          columns[x].push(images[ imagesIndex ]);\n        }\n      }\n\n      return columns;\n    };\n\n    ctrl.imageThumbs = FormatImageList($scope.content);\n  }\n\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('imageLightbox', imageLightbox);\n\n  function imageLightbox(){\n    return{\n      restrict:'EA',\n      scope:{\n        content: '=content'\n      },\n      templateUrl: '/common/directives/imageLightbox/imageLightbox.directive.html',\n      controller: imageLightboxController,\n      controllerAs: 'viewModel'\n    };\n  }\n\n  imageLightboxController.$inject = [];\n  function imageLightboxController(){\n    var ctrl = this;\n    ctrl.imageWidth = \"\";\n\n    $(document).ready(function(){\n\n      $('#lightbox').on('shown.bs.modal', function () {\n\n        var screenImage = $(\"#lightbox img\");\n        var theImage = new Image();\n        theImage.src = screenImage.attr(\"src\");\n        ctrl.imageWidth = theImage.width;\n\n        $(this).find(\".modal-dialog\").css(\"width\", ctrl.imageWidth);\n      });\n    });\n  }\n\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('navigationBar', navigationBar);\n\n  function navigationBar(){\n    return{\n      restrict:'EA',\n      templateUrl: '/common/directives/navigationBar/navigationBar.directive.html',\n      controller: navigationBarController,\n      controllerAs: 'ctrl'\n    };\n  }\n\n  navigationBarController.$inject = ['$location'];\n  function navigationBarController($location){\n    var ctrl = this;\n\n    ctrl.isActive = function(path){\n      if(path.length === 1){\n        // If checking if we're on homepage...\n        return $location.path() === '/' && $location.search().category === undefined;\n      }\n\n      return $location.absUrl().indexOf(path) != -1;\n    };\n  }\n\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('underlinePageBreak', underlinePageBreak);\n\n  function underlinePageBreak(){\n    return{\n      restrict:'EA',\n      templateUrl: '/common/directives/pageBreak/underline.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('textBlock', textBlock);\n\n  function textBlock(){\n    return{\n      restrict:'EA',\n      scope:{\n        content: '=content'\n      },\n      templateUrl: '/common/directives/textBlock/textBlock.directive.html'\n    };\n  }\n})();\n"],"sourceRoot":"/source/"}