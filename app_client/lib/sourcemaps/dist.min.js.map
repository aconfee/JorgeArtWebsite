{"version":3,"sources":["about/about.controller.js","login/login.controller.js","app.js","home/home.controller.js","projectPage/projectPage.controller.js","common/services/authentication.service.js","common/services/dataMappingService.js","common/services/projectsService.js","common/services/responsiveService.js","common/services/upload.service.js","admin/dashboard/dashboard.controller.js","admin/newProject/newProject.controller.js","common/directives/embededVideo/embededVideo.directive.js","common/directives/fileModel/fileModel.directive.js","common/directives/imageGallery/imageGallery.directive.js","common/directives/adminHeader/adminHeader.directive.js","common/directives/imageLightbox/imageLightbox.directive.js","common/directives/coverImage/coverImage.directive.js","common/directives/navigationBar/navigationBar.directive.js","common/directives/textBlock/textBlock.directive.js","common/directives/pageBreak/underline.directive.js"],"names":["aboutController","$scope","viewModel","this","myVariable","loginCtrl","$location","AuthentictionService","pageHeader","title","credentials","username","password","returnPage","onSubmit","formError","doLogin","login","error","err","message","then","path","config","$routeProvider","$locationProvider","when","templateUrl","controller","controllerAs","otherwise","redirectTo","html5Mode","angular","module","$inject","homeController","$window","$sce","ProjectsService","ResponsiveService","categoryFilter","search","category","currentWidth","innerWidth","rowSize","GetHomePageRowSize","videoLink","trustAsResourceUrl","showVideo","undefined","GetProjectsHomePage","projectsVm","projects","element","bind","console","log","projectPageController","$routeParams","project","projectId","projectid","scrollTo","GetProject","GetProjectPage","pageData","blogItems","nextProject","GetAllProjects","i","length","_id","previousProject","$http","saveToken","token","localStorage","getToken","user","post","success","data","logout","removeItem","isLoggedIn","payload","JSON","parse","atob","split","exp","Date","now","service","DataMappingService","MapProjectDataToProjectPageVm","pageItems","sort","a","b","position","type","content","MapProjectsDataToHomePageVm","Array","isArray","projectRows","rows","projectsIndex","y","push","x","projectCoverImageAspectRatio","allProjectsFilter","designProjectsFilter","animationProjectsFilter","illustrationProjectsFilter","artworkProjectsFilter","miscProjectsFilter","callback","get","response","status","filteredProjectsList","FilterProjectsByCategory","mapped","filteredProjects","smallScreenMax","mediumScreenMax","UploadService","uploadImage","fileData","successCB","errorCB","fd","FormData","append","transformRequest","identity","headers","Content-Type","Authorization","dashboardController","projectToDelete","markForDelete","index","deleteProject","newProjectController","isNew","absUrl","indexOf","formMessageHeader","created","newProject","createProject","getAspectRatio","editProject","put","uploadProjectCoverImage","projectCoverImage","filepath","uploadBlogItemCoverImage","uploadToGallery","contentArray","addNewPageItem","removePageItem","splice","resetProject","elementQuery","screenImage","$","theImage","Image","src","attr","aspect","width","height","embededVideo","restrict","scope","embededUrl","directive","fileModel","$parse","link","attrs","model","modelSetter","assign","$apply","files","imageGallery","selectedImage","imageGalleryController","ctrl","GetNumberOfColumns","numCols","numColumns","lightboxImage","GalleryThumbClick","image","imageThumbs","FormatImageList","images","columns","Math","ceil","imagesIndex","adminHeader","adminHeaderController","imageLightbox","imageLightboxController","imageWidth","document","ready","on","find","css","coverImage","navigationBar","navigationBarController","isActive","textBlock","underlinePageBreak"],"mappings":"AAKA,QAAAA,iBAAAC,GACA,GAAAC,GAAAC,IAEAD,GAAAE,WAAA,4BCHA,QAAAC,WAAAC,EAAAC,GACA,GAAAL,GAAAC,IAEAD,GAAAM,YACAC,MAAA,iBAGAP,EAAAQ,aACAC,SAAA,GACAC,SAAA,IAGAV,EAAAW,WAAA,SACAX,EAAAY,SAAA,WAEA,MADAZ,GAAAa,UAAA,GACAb,EAAAQ,YAAAC,UAAAT,EAAAQ,YAAAE,aAKAV,GAAAc,WAJAd,EAAAa,UAAA,wBACA,IAOAb,EAAAc,QAAA,WACAd,EAAAa,UAAA,GACAR,EACAU,MAAAf,EAAAQ,aACAQ,MAAA,SAAAC,GACAjB,EAAAa,UAAAI,EAAAC,UAEAC,KAAA,WAEAf,EAAAgB,KAAApB,EAAAW,gBClCA,WAMA,QAAAU,GAAAC,EAAAC,GACAD,EACAE,KAAA,KACAC,YAAA,sBACAC,WAAA,iBACAC,aAAA,cAEAH,KAAA,UACAC,YAAA,wBACAC,WAAA,kBACAC,aAAA,cAEAH,KAAA,wBACAC,YAAA,oCACAC,WAAA,wBACAC,aAAA,cAEAH,KAAA,UACAC,YAAA,yBACAC,WAAA,YACAC,aAAA,cAEAH,KAAA,UACAC,YAAA,uCACAC,WAAA,sBACAC,aAAA,cAEAH,KAAA,0BACAC,YAAA,yCACAC,WAAA,uBACAC,aAAA,cAEAH,KAAA,qBACAC,YAAA,yCACAC,WAAA,uBACAC,aAAA,cAEAC,WAAAC,WAAA,MAGAN,EAAAO,WAAA,GA3CAC,QAAAC,OAAA,sBAAA,YA+CAD,QACAC,OAAA,sBACAX,QAAA,iBAAA,oBAAAA,OFxDAU,QACAC,OAAA,sBACAN,WAAA,kBAAA5B,iBAEAA,gBAAAmC,SAAA,UGFA,WAOA,QAAAC,GAAAnC,EAAAoC,EAAA/B,EAAAgC,EAAAC,EAAAC,GACA,GAAAtC,GAAAC,KACAsC,EAAAnC,EAAAoC,SAAAC,SAGAC,EAAAP,EAAAQ,WACAC,EAAAN,EAAAO,oBAEA7C,GAAA8C,UAAAV,EAAAW,mBAAA,6CACA/C,EAAAgD,UAAAC,SAAAV,EAKAF,EAAAa,oBAAAX,EAAA,SAAAY,GACAnD,EAAAoD,SAAAD,IAMApB,QAAAsB,QAAAlB,GAAAmB,KAAA,SAAA,WAGAnB,EAAAQ,aAAAD,GAKAE,IAAAN,EAAAO,uBAIAU,QAAAC,IAAA,YAEAd,EAAAP,EAAAQ,WACAC,EAAAN,EAAAO,qBAGAR,EAAAa,oBAAAX,EAAA,SAAAY,GACAnD,EAAAoD,SAAAD,OA7CApB,QACAC,OAAA,sBACAN,WAAA,iBAAAQ,GAEAA,EAAAD,SAAA,SAAA,UAAA,YAAA,OAAA,kBAAA,wBCRA,WAOA,QAAAwB,GAAAtB,EAAAuB,EAAAtD,EAAAiC,GACA,GAAArC,GAAAC,IACAD,GAAA2D,WAEA3D,EAAA4D,UAAAF,EAAAG,UAGA1B,EAAA2B,SAAA,EAAA,GAEAzB,EAAA0B,WAAA/D,EAAA4D,UAAA,SAAAD,GACA3D,EAAA2D,QAAAA,IAGAtB,EAAA2B,eAAAN,EAAAG,UAAA,SAAAI,GACAjE,EAAAkE,UAAAD,IAGAjE,EAAAmE,YAAA,WACA9B,EAAA+B,eAAA,SAAAhB,GAEA,IADA,GAAAiB,GAAA,EACAA,EAAAjB,EAAAkB,QACAlB,EAAAiB,GAAAE,MAAAvE,EAAA2D,QAAAY,IADAF,KAMAA,IAAAjB,EAAAkB,OAAA,IACAD,EAAA,IAGAjE,EAAAgB,KAAA,aAAAgC,EAAAiB,EAAA,GAAAE,QAIAvE,EAAAwE,gBAAA,WACAnC,EAAA+B,eAAA,SAAAhB,GAEA,IADA,GAAAiB,GAAA,EACAA,EAAAjB,EAAAkB,QACAlB,EAAAiB,GAAAE,MAAAvE,EAAA2D,QAAAY,IADAF,KAMA,IAAAA,IACAA,EAAAjB,EAAAkB,QAGAlE,EAAAgB,KAAA,aAAAgC,EAAAiB,EAAA,GAAAE,QApDAxC,QACAC,OAAA,sBACAN,WAAA,wBAAA+B,GAEAA,EAAAxB,SAAA,UAAA,eAAA,YAAA,sBHNAF,QACAC,OAAA,sBACAN,WAAA,YAAAvB,WAEAA,UAAA8B,SAAA,YAAA,wBIJA,WAMA,QAAA5B,GAAA8B,EAAAsC,GACA,GAAAC,GAAA,SAAAC,GACAxC,EAAAyC,aAAA,eAAAD,GAGAE,EAAA,WACA,MAAA1C,GAAAyC,aAAA,gBAGA7D,EAAA,SAAA+D,GACA,MAAAL,GAAAM,KAAA,aAAAD,GAAAE,QAAA,SAAAC,GACAP,EAAAO,EAAAN,UAIAO,EAAA,WACA/C,EAAAyC,aAAAO,WAAA,gBAGAC,EAAA,WACA,GAAAT,GAAAE,GAEA,IAAAF,EAAA,CACA,GAAAU,GAAAC,KAAAC,MAAApD,EAAAqD,KAAAb,EAAAc,MAAA,KAAA,IAEA,OAAAJ,GAAAK,IAAAC,KAAAC,MAAA,IAGA,OAAA,EAcA,QACA7E,MAAAA,EACAmE,OAAAA,EACAE,WAAAA,EACAV,UAAAA,EACAG,SAAAA,GApDA9C,QACAC,OAAA,sBACA6D,QAAA,uBAAAxF,GAEAA,EAAA4B,SAAA,UAAA,YCLA,WAOA,QAAA6D,GAAA1D,EAAAE,GACA,GAAAuD,GAAA5F,IAKA4F,GAAAE,8BAAA,SAAAd,GACA,GAAAf,GAAAe,EAAAe,SAGA9B,GAAA+B,KAAA,SAAAC,EAAAC,GACA,MAAAD,GAAAE,SAAAD,EAAAC,UAIA,KAAA,GAAA/B,GAAA,EAAAA,EAAAY,EAAAe,UAAA1B,OAAAD,IACA,UAAAY,EAAAe,UAAA3B,GAAAgC,OACApB,EAAAe,UAAA3B,GAAAiC,QAAAlE,EAAAW,mBAAAkC,EAAAe,UAAA3B,GAAAiC,SAIA,OAAApC,IAOA2B,EAAAU,4BAAA,SAAAnD,GACA,GAAAH,SAAAG,EAEA,WADAG,SAAAvC,MAAA,yBAIA,IAAA,IAAAoC,EAAAkB,OAEA,WADAf,SAAAvC,MAAA,qCAIA,IAAAwF,MAAAC,QAAArD,MAAA,EAEA,WADAG,SAAAvC,MAAA,kCAIAoC,GAAA6C,KAAA,SAAAC,EAAAC,GACA,MAAAD,GAAAE,SAAAD,EAAAC,UAGA,IAAAxD,GAAAN,EAAAO,qBACA6D,KACAC,EAAAvD,EAAAkB,OAAA1B,CAEA,KAAA+D,IAAAA,EAAA,EAGA,KAAA,GADAC,GAAA,EACAC,EAAA,EAAAF,EAAAE,EAAAA,IAAA,CACAH,EAAAI,QAEA,KAAA,GAAAC,GAAA,EAAAnE,EAAAmE,GAEAH,IAAAxD,EAAAkB,OAFAyC,IAAAH,IAIAF,EAAAG,GAAAC,KAAA1D,EAAAwD,GAIA,KAAAF,EAAAG,GAAAvC,SACAoC,EAAAG,GAAA,GAAAG,6BAAA,GAIA,MAAAN,IA5EA3E,QACAC,OAAA,sBACA6D,QAAA,qBAAAC,GAEAA,EAAA7D,SAAA,OAAA,wBCNA,WAOA,QAAAI,GAAAD,EAAAqC,EAAAqB,GACA,GAAAD,GAAA5F,IAEA4F,GAAAoB,kBAAAhE,OACA4C,EAAAqB,qBAAA,SACArB,EAAAsB,wBAAA,YACAtB,EAAAuB,2BAAA,eACAvB,EAAAwB,sBAAA,UACAxB,EAAAyB,mBAAA,OAKAzB,EAAAzB,eAAA,SAAAmD,GACA9C,EAAA+C,IAAA,kBAAArG,KACA,SAAAsG,GACA,MAAAA,EAAAC,SAEAD,EAAAxC,KAAAgB,KAAA,SAAAC,EAAAC,GACA,MAAAD,GAAAE,SAAAD,EAAAC,WAGAmB,EAAAE,EAAAxC,QAGA,SAAAwC,GACAlE,QAAAvC,MAAA,iDAQA6E,EAAA9B,WAAA,SAAAH,EAAA2D,GAEA9C,EAAA+C,IAAA,iBAAA5D,GAAAzC,KACA,SAAAsG,GACA,MAAAA,EAAAC,QACAH,EAAAE,EAAAxC,OAGA,SAAAwC,GACAlE,QAAAvC,MAAA,6CAAA4C,MAQAiC,EAAA7B,eAAA,SAAAJ,EAAA2D,GAEA9C,EAAA+C,IAAA,iBAAA5D,GAAAzC,KACA,SAAAsG,GACA,MAAAA,EAAAC,QACAH,EAAAzB,EAAAC,8BAAA0B,EAAAxC,QAGA,SAAAwC,GACAlE,QAAAvC,MAAA,6CAAA4C,MAQAiC,EAAA3C,oBAAA,SAAAT,EAAA8E,GACA9C,EAAA+C,IAAA,kBAAArG,KACA,SAAAsG,GACA,GAAA,MAAAA,EAAAC,OAAA,CACA,GAAAC,GAAAC,EAAAH,EAAAxC,KAAAxC,GACAoF,EAAA/B,EAAAS,4BAAAoB,EAEAJ,GAAAM,KAGA,SAAAJ,GACAlE,QAAAC,IAAA,sDAOA,IAAAoE,GAAA,SAAAxE,EAAAX,GACA,GAAAqF,KAEA,IAAArF,IAAAoD,EAAAoB,kBACA,MAAA7D,EAGA,KAAA,GAAAiB,GAAA,EAAAA,EAAAjB,EAAAkB,OAAAD,IAEAjB,EAAAiB,GAAA5B,WAAAA,GACAqF,EAAAhB,KAAA1D,EAAAiB,GAIA,OAAAyD,IAzGA/F,QACAC,OAAA,sBACA6D,QAAA,kBAAAxD,GAEAA,EAAAJ,SAAA,OAAA,QAAA,yBCNA,WAOA,QAAAK,GAAAH,GACA,GAAA0D,GAAA5F,KAEA8H,EAAA,IACAC,EAAA,IAMAnC,GAAAhD,mBAAA,WACA,GAAAD,GAAA,CAUA,OARAT,GAAAQ,WAAAoF,IACAnF,EAAA,GAGAT,EAAAQ,WAAAqF,IACApF,EAAA,GAGAA,GA1BAb,QACAC,OAAA,sBACA6D,QAAA,oBAAAvD,GAEAA,EAAAL,SAAA,cCNA,WAMA,QAAAgG,GAAAxD,EAAApE,GACAwF,QAAA5F,KAEA4F,QAAAqC,YAAA,SAAAC,EAAAC,EAAAC,GAEA,GAAAC,GAAA,GAAAC,SACAD,GAAAE,OAAA,OAAAL,GACA1D,EAAAM,KAAA,cAAAuD,GACAG,iBAAA1G,QAAA2G,SACAC,SACAC,eAAA3F,OACA4F,cAAA,UAAAxI,EAAAwE,cAGAG,QAAA,SAAAyC,GACAW,EAAAX,KAEAzG,MAAA,SAAAyG,GACAY,EAAAZ,MAvBA1F,QACAC,OAAA,sBACA6D,QAAA,gBAAAoC,GAEAA,EAAAhG,SAAA,QAAA,2BCLA,WAOA,QAAA6G,GAAA/I,EAAAK,EAAAqE,EAAApC,EAAAhC,GAEA,GAAAL,GAAAC,IACAD,GAAAoD,YACApD,EAAA+I,mBAGA1I,EAAA+E,gBAAA,GACAhF,EAAAgB,KAAA,UAMAiB,EAAA+B,eAAA,SAAAhB,GACApD,EAAAoD,SAAAA,IAGApD,EAAAgJ,cAAA,SAAAC,GACAjJ,EAAA+I,gBAAA/I,EAAAoD,SAAA6F,IAGAjJ,EAAAkJ,cAAA,WACAzE,EAAAA,UAAA,iBAAAzE,EAAA+I,gBAAAxE,KACAoE,SACAE,cAAA,UAAAxI,EAAAwE,cAEA1D,KACA,SAAAsG,GAGApF,EAAA+B,eAAA,SAAAhB,GACApD,EAAAoD,SAAAA,KAGA,SAAAqE,GACAlE,QAAAtC,IAAA,+CAzCAc,QACAC,OAAA,sBACAN,WAAA,sBAAAoH,GAEAA,EAAA7G,SAAA,SAAA,YAAA,QAAA,kBAAA,2BCNA,WAOA,QAAAkH,GAAApJ,EAAAK,EAAAqE,EAAAf,EAAArD,EAAA4H,EAAA5F,GACA,GAAArC,GAAAC,IAqBA,IAlBAI,EAAA+E,gBAAA,GACAhF,EAAAgB,KAAA,UAGApB,EAAAoJ,OAAA,EACAhJ,EAAAiJ,SAAAC,QAAA,cAAA,KACAtJ,EAAAoJ,OAAA,GAGApJ,EAAAuJ,kBAAA,GACAvJ,EAAAa,UAAA,GACAb,EAAAwJ,SAAA,EACAxJ,EAAAyJ,cACAzJ,EAAAmI,YAKAnI,EAAAoJ,SAAA,EAAA,CACA,GAAAvF,GAAAH,EAAAG,SACAxB,GAAA0B,WAAAF,EAAA,SAAAF,GACA3D,EAAAyJ,WAAA9F,IAOA3D,EAAA0J,cAAA,WAEA1J,EAAAyJ,WAAAzC,6BAAA2C,EAAA,sBAEAlF,EAAAM,KAAA,gBAAA/E,EAAAyJ,YACAd,SACAE,cAAA,UAAAxI,EAAAwE,cAEA1D,KACA,SAAAsG,GACAzH,EAAAuJ,kBAAA,WACAvJ,EAAAa,UAAA,mBACAb,EAAAwJ,SAAA,EACApJ,EAAAgB,KAAA,WAEA,SAAAqG,GACAzH,EAAAuJ,kBAAA,QACAvJ,EAAAa,UAAA,kDAAA4G,EAAAxC,KACAjF,EAAAwJ,SAAA,KAKAxJ,EAAA4J,YAAA,WACA,GAAA/F,GAAAH,EAAAG,SAEA7D,GAAAyJ,WAAAzC,6BAAA2C,EAAA,sBAEAlF,EAAAoF,IAAA,iBAAAhG,EAAA7D,EAAAyJ,YACAd,SACAE,cAAA,UAAAxI,EAAAwE,cAEA1D,KACA,SAAAsG,GACAzH,EAAAuJ,kBAAA,WACAvJ,EAAAa,UAAA,mBACAb,EAAAwJ,SAAA,EACApJ,EAAAgB,KAAA,WAEA,SAAAqG,GACAzH,EAAAuJ,kBAAA,QACAvJ,EAAAa,UAAA,qDAAA4G,EAAAxC,KACAjF,EAAAwJ,SAAA,KAIAxJ,EAAA8J,wBAAA,WACA7B,EAAAC,YAAAlI,EAAAyJ,WAAAM,kBACA,SAAAtC,GACAzH,EAAAyJ,WAAAM,kBAAAtC,EAAAuC,UAEA,SAAAvC,GACAlE,QAAAC,IAAA,kDAIAxD,EAAAiK,yBAAA,SAAAhB,GACAhB,EAAAC,YAAAlI,EAAAyJ,WAAAzD,UAAAiD,GAAA3C,QACA,SAAAmB,GACAzH,EAAAyJ,WAAAzD,UAAAiD,GAAA3C,QAAAmB,EAAAuC,UAEA,SAAAvC,GACAlE,QAAAC,IAAA,kDAIAxD,EAAAkK,gBAAA,SAAAjB,GACAhB,EAAAC,YAAAlI,EAAAmI,SACA,SAAAV,GACAzH,EAAAyJ,WAAAzD,UAAAiD,GAAAkB,aAAArD,KAAAW,EAAAuC,WAEA,SAAAvC,GACAlE,QAAAC,IAAA,kDAIAxD,EAAAoK,eAAA,WACAnH,SAAAjD,EAAAyJ,WAAAzD,YACAhG,EAAAyJ,WAAAzD,cAGAhG,EAAAyJ,WAAAzD,UAAAc,MACAV,SAAA,EACAE,QAAA,GACA6D,mBAIAnK,EAAAqK,eAAA,SAAApB,GACAjJ,EAAAyJ,WAAAzD,UAAAsE,OAAArB,EAAA,IAGAjJ,EAAAuK,aAAA,WACAvK,EAAAyJ,cAGA,IAAAE,GAAA,SAAAa,GACA,GAAAC,GAAAC,EAAA,sBACAC,EAAA,GAAAC,MACAD,GAAAE,IAAAJ,EAAAK,KAAA,MAEA,IAAAC,GAAAJ,EAAAK,MAAAL,EAAAM,MAEA,OAAAF,IA5IAhJ,QACAC,OAAA,sBACAN,WAAA,uBAAAyH,GAEAA,EAAAlH,SAAA,SAAA,YAAA,QAAA,eAAA,uBAAA,gBAAA,sBCNA,WAKA,QAAAiJ,KACA,OACAC,SAAA,KACAC,OACAC,WAAA,eAEA5J,YAAA,+DAVAM,QACAC,OAAA,sBACAsJ,UAAA,eAAAJ,MCHA,WAKA,QAAAK,GAAAC,GACA,OACAL,SAAA,IACAM,KAAA,SAAAL,EAAA/H,EAAAqI,GACA,GAAAC,GAAAH,EAAAE,EAAAH,WACAK,EAAAD,EAAAE,MAEAxI,GAAAC,KAAA,SAAA,WACA8H,EAAAU,OAAA,WACAF,EAAAR,EAAA/H,EAAA,GAAA0I,MAAA,UAbAhK,QACAC,OAAA,sBACAsJ,UAAA,aAAA,SAAAC,OCHA,WAMA,QAAAS,KACA,OACAb,SAAA,KACAC,OACA9E,QAAA,WACA2F,cAAA,kBAEAxK,YAAA,8DACAC,WAAAwK,EACAvK,aAAA,QAQA,QAAAuK,GAAAnM,EAAAoC,GACA,GAAAgK,GAAAlM,KAEA8H,EAAA,IACAC,EAAA,IAEAoE,EAAA,WACA,GAAAC,GAAA,CAYA,OATAA,GAAA,EAEAlK,EAAAQ,WAAAoF,IACAsE,EAAA,GAEAlK,EAAAQ,WAAAqF,IACAqE,EAAA,GAGAA,GAIA3J,EAAAP,EAAAQ,WACA2J,EAAAF,GAGAD,GAAAI,cAAA,GAEAJ,EAAAK,kBAAA,SAAAC,GAEA1M,EAAAkM,cAAAQ,GAGA1K,QAAAsB,QAAAlB,GAAAmB,KAAA,SAAA,WAGAnB,EAAAQ,aAAAD,GAKA4J,IAAAF,MAIA1J,EAAAP,EAAAQ,WACA2J,EAAAF,IAEA7I,QAAAC,IAAA,YAEA2I,EAAAO,YAAAC,EAAA5M,EAAAuG,SACAvG,EAAA+L,WAGA,IAAAa,GAAA,SAAAC,GAMA,IAAA,GALAC,MACAP,EAAAF,IACAzF,EAAAmG,KAAAC,KAAAH,EAAAtI,OAAAgI,GAEAU,EAAA,EACAnG,EAAA,EAAAF,EAAAE,EAAAA,IACA,IAAA,GAAAE,GAAA,EAAAuF,EAAAvF,IACA9D,SAAA4J,EAAA9F,IACA8F,EAAA/F,SAIAkG,IAAAJ,EAAAtI,QANAyC,IAAAiG,IAQAH,EAAA9F,GAAAD,KAAA8F,EAAAI,GAIA,OAAAH,GAGAV,GAAAO,YAAAC,EAAA5M,EAAAuG,SAnGAvE,QACAC,OAAA,sBACAN,WAAA,yBAAAwK,GACAZ,UAAA,eAAAU,GAkBAE,EAAAjK,SAAA,SAAA,cCtBA,WAKA,QAAAgL,KACA,OACA9B,SAAA,KACA1J,YAAA,4DACA2J,OACA7K,MAAA,UAEAmB,WAAAwL,EACAvL,aAAA,aAQA,QAAAuL,GAAA9M,EAAAC,GACA,GAAAL,GAAAC,IAEAD,GAAAkF,OAAA,WACA7E,EAAA6E,SACA9E,EAAAgB,KAAA,MAzBAW,QACAC,OAAA,sBACAsJ,UAAA,cAAA2B,GAiBAC,EAAAjL,SAAA,YAAA,2BCpBA,WAKA,QAAAkL,KACA,OACAhC,SAAA,KACAC,OACA9E,QAAA,YAEA7E,YAAA,gEACAC,WAAA0L,EACAzL,aAAA,aAKA,QAAAyL,KACA,GAAAjB,GAAAlM,IACAkM,GAAAkB,WAAA,GAEA3C,EAAA4C,UAAAC,MAAA,WAEA7C,EAAA,aAAA8C,GAAA,iBAAA,WAEA,GAAA/C,GAAAC,EAAA,iBACAC,EAAA,GAAAC,MACAD,GAAAE,IAAAJ,EAAAK,KAAA,OACAqB,EAAAkB,WAAA1C,EAAAK,MAEAN,EAAAzK,MAAAwN,KAAA,iBAAAC,IAAA,QAAAvB,EAAAkB,gBA9BAtL,QACAC,OAAA,sBACAsJ,UAAA,gBAAA6B,GAcAC,EAAAnL,cCjBA,WAKA,QAAA0L,KACA,OACAxC,SAAA,KACAC,OACA9E,QAAA,YAEA7E,YAAA,2DAVAM,QACAC,OAAA,sBACAsJ,UAAA,aAAAqC,MCHA,WAKA,QAAAC,KACA,OACAzC,SAAA,KACA1J,YAAA,gEACAC,WAAAmM,EACAlM,aAAA,QAKA,QAAAkM,GAAAzN,GACA,GAAA+L,GAAAlM,IAEAkM,GAAA2B,SAAA,SAAA1M,GACA,MAAA,KAAAA,EAAAkD,OAEA,MAAAlE,EAAAgB,QAAA6B,SAAA7C,EAAAoC,SAAAC,SAGA,IAAArC,EAAAiJ,SAAAC,QAAAlI,IAvBAW,QACAC,OAAA,sBACAsJ,UAAA,gBAAAsC,GAWAC,EAAA5L,SAAA,gBCdA,WAKA,QAAA8L,KACA,OACA5C,SAAA,KACAC,OACA9E,QAAA,YAEA7E,YAAA,yDAVAM,QACAC,OAAA,sBACAsJ,UAAA,YAAAyC,MCHA,WAKA,QAAAC,KACA,OACA7C,SAAA,KACA1J,YAAA,yDAPAM,QACAC,OAAA,sBACAsJ,UAAA,qBAAA0C","file":"dist.min.js","sourcesContent":["angular\n  .module('PortfolioSPAModule')\n  .controller('aboutController', aboutController);\n\naboutController.$inject = ['$scope'];\nfunction aboutController($scope){\n  var viewModel = this;\n\n  viewModel.myVariable = \"I'm pretty cool, I guess.\";\n}\n","angular\n  .module('PortfolioSPAModule')\n  .controller('loginCtrl', loginCtrl);\n\nloginCtrl.$inject = ['$location', 'AuthentictionService'];\nfunction loginCtrl($location, AuthentictionService){\n  var viewModel = this;\n\n  viewModel.pageHeader = {\n    title: 'Admin Sign In'\n  };\n\n  viewModel.credentials = {\n    username: \"\",\n    password: \"\"\n  };\n\n  viewModel.returnPage = '/admin'; // Go to admin page once logged in.\n  viewModel.onSubmit = function(){\n    viewModel.formError = \"\";\n    if(!viewModel.credentials.username || !viewModel.credentials.password){\n      viewModel.formError = \"All fields required.\";\n      return false;\n    }\n    else{\n      viewModel.doLogin();\n    }\n  };\n\n  viewModel.doLogin = function(){\n    viewModel.formError = \"\";\n    AuthentictionService\n      .login(viewModel.credentials)\n      .error(function(err){\n        viewModel.formError = err.message;\n      })\n      .then(function(){\n        //$location.search('page', null); no need to get query param for return page.\n        $location.path(viewModel.returnPage);\n      });\n  };\n}\n","/*\n* Angular application.\n*/\n\n(function(){\n\n  // Define the app module and it's dependencies.\n  angular.module('PortfolioSPAModule', ['ngRoute']);\n\n  // Create a config for our app -- configure our routes.\n  function config ($routeProvider, $locationProvider){\n    $routeProvider\n      .when('/', {\n        templateUrl: 'home/home.view.html',\n        controller: 'homeController',\n        controllerAs: 'viewModel'\n      })\n      .when('/about', {\n        templateUrl: 'about/about.view.html',\n        controller: 'aboutController',\n        controllerAs: 'viewModel'\n      })\n      .when('/projects/:projectid', {\n        templateUrl: 'projectPage/projectPage.view.html',\n        controller: 'projectPageController',\n        controllerAs: 'viewModel'\n      })\n      .when('/login', {\n        templateUrl: '/login/login.view.html',\n        controller: 'loginCtrl',\n        controllerAs: 'viewModel'\n      })\n      .when('/admin', {\n        templateUrl: '/admin/dashboard/dashboard.view.html',\n        controller: 'dashboardController',\n        controllerAs: 'viewModel'\n      })\n      .when('/admin/edit/:projectid', {\n        templateUrl: '/admin/newProject/newProject.view.html',\n        controller: 'newProjectController',\n        controllerAs: 'viewModel'\n      })\n      .when('/admin/newProject', {\n        templateUrl: '/admin/newProject/newProject.view.html',\n        controller: 'newProjectController',\n        controllerAs: 'viewModel'\n      })\n      .otherwise({redirectTo: '/'});\n\n    // Pretty up URLs. Base defined in index.html.\n    $locationProvider.html5Mode(true);\n  }\n\n  // Add the config to our app.\n  angular\n    .module('PortfolioSPAModule')\n    .config(['$routeProvider', '$locationProvider', config]);\n\n})();\n","// Using function scopes to prevent global scope variables.\n// God, I can't wait to use typescript.\n(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .controller('homeController', homeController);\n\n  homeController.$inject = ['$scope', '$window', '$location', '$sce', 'ProjectsService', 'ResponsiveService'];\n  function homeController($scope, $window, $location, $sce, ProjectsService, ResponsiveService){\n    var viewModel = this;\n    var categoryFilter = $location.search().category; // Once per 'page load'\n\n    // For row resize.\n    var currentWidth = $window.innerWidth;\n    var rowSize = ResponsiveService.GetHomePageRowSize();\n\n    viewModel.videoLink = $sce.trustAsResourceUrl(\"https://www.youtube.com/embed/CJ_GCPaKywg\");\n    viewModel.showVideo = categoryFilter === undefined; // Promo on 'all' page.\n\n    ///\n    /// Request the projects to disply on the home page.\n    ///\n    ProjectsService.GetProjectsHomePage(categoryFilter, function(projectsVm){\n      viewModel.projects = projectsVm;\n    });\n\n    ///\n    /// Adjust the row sizes if need be.\n    ///\n    angular.element($window).bind('resize', function () {\n\n      // Don't resize if width hasn't changed.\n      if($window.innerWidth === currentWidth){\n        return;\n      }\n\n      // Don't resize if we don't actually need to adjust row size.\n      if(rowSize === ResponsiveService.GetHomePageRowSize()){\n        return;\n      }\n\n      console.log(\"resizing\");\n\n      currentWidth = $window.innerWidth;\n      rowSize = ResponsiveService.GetHomePageRowSize();\n\n      // Possiblity to cache here... if necessary.\n      ProjectsService.GetProjectsHomePage(categoryFilter, function(projectsVm){\n        viewModel.projects = projectsVm;\n        //$scope.$apply(); // Not needed... two way bind automatically digests.\n      });\n    });\n  }\n\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .controller('projectPageController', projectPageController);\n\n  projectPageController.$inject = ['$window', '$routeParams', '$location', 'ProjectsService'];\n  function projectPageController($window, $routeParams, $location, ProjectsService){\n    var viewModel = this;\n    viewModel.project = {};\n\n    viewModel.projectId = $routeParams.projectid;\n\n    // Make sure we always start at the top of the page.\n    $window.scrollTo(0, 0);\n\n    ProjectsService.GetProject(viewModel.projectId, function(project){\n      viewModel.project = project;\n    });\n\n    ProjectsService.GetProjectPage($routeParams.projectid, function(pageData){\n      viewModel.blogItems = pageData;\n    });\n\n    viewModel.nextProject = function(){\n      ProjectsService.GetAllProjects(function(projects){\n        var i = 0;\n        for(; i < projects.length; i++){\n          if(projects[i]._id === viewModel.project._id){\n            break;\n          }\n        }\n\n        if(i === projects.length - 1){\n          i = -1;\n        }\n\n        $location.path('/projects/' + projects[i + 1]._id);\n      });\n    };\n\n    viewModel.previousProject = function(){\n      ProjectsService.GetAllProjects(function(projects){\n        var i = 0;\n        for(; i < projects.length; i++){\n          if(projects[i]._id === viewModel.project._id){\n            break;\n          }\n        }\n\n        if(i === 0){\n          i = projects.length;\n        }\n\n        $location.path('/projects/' + projects[i - 1]._id);\n      });\n    };\n  }\n\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .service('AuthentictionService', AuthentictionService);\n\n    AuthentictionService.$inject = ['$window', '$http'];\n    function AuthentictionService($window, $http){\n      var saveToken = function(token){\n        $window.localStorage['admin-token'] = token;\n      };\n\n      var getToken = function(){\n        return $window.localStorage['admin-token'];\n      };\n\n      var login = function(user){\n        return $http.post('/api/login', user).success(function(data){\n          saveToken(data.token);\n        });\n      };\n\n      var logout = function(){\n        $window.localStorage.removeItem('admin-token');\n      };\n\n      var isLoggedIn = function(){\n        var token = getToken();\n\n        if(token){\n          var payload = JSON.parse($window.atob(token.split('.')[1]));\n\n          return payload.exp > Date.now() / 1000;\n        }\n        else{\n          return false;\n        }\n      };\n\n      var currentUser = function(){\n        if(isLoggedIn()){\n          var token = getToken();\n          var payload = JSON.parse($window.atob(token.split('.')[1]));\n          return {\n            username: payload.username\n          };\n        }\n      };\n\n      return {\n        login: login,\n        logout: logout,\n        isLoggedIn: isLoggedIn,\n        saveToken: saveToken,\n        getToken: getToken\n      };\n    }\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .service('DataMappingService', DataMappingService);\n\n  DataMappingService.$inject = ['$sce', 'ResponsiveService'];\n  function DataMappingService($sce, ResponsiveService){\n    var service = this;\n\n    ///\n    /// Map the data returned by a project page to its view model.\n    ///\n     service.MapProjectDataToProjectPageVm = function(data){\n      var blogItems = data.pageItems;\n\n      // Sort the list by position\n      blogItems.sort(function(a, b) {\n        return a.position > b.position;\n      });\n\n      // Trust all video links as secure.\n      for(var i = 0; i < data.pageItems.length; i++){\n        if(data.pageItems[i].type === \"video\"){\n          data.pageItems[i].content = $sce.trustAsResourceUrl(data.pageItems[i].content);\n        }\n      }\n\n      return blogItems;\n    };\n\n    ///\n    /// Take an array of projects and map them to a 2D array of relevent\n    /// project info to be used by the view.\n    ///\n    service.MapProjectsDataToHomePageVm = function(projects){\n      if(projects === undefined){\n        console.error(\"projects is undefined.\");\n        return;\n      }\n\n      if(projects.length === 0){\n        console.error(\"No projects in the projects array.\");\n        return;\n      }\n\n      if(Array.isArray(projects) === false){\n        console.error(\"Array of projects not provided.\");\n        return;\n      }\n\n      projects.sort(function(a, b) {\n        return a.position > b.position;\n      });\n\n      var rowSize = ResponsiveService.GetHomePageRowSize();\n      var projectRows = [];\n      var rows = projects.length / rowSize;\n\n      if(rows === 0) rows = 1;\n\n      var projectsIndex = 0;\n      for (var y = 0; y < rows; y++) {\n        projectRows.push([]);\n\n        for(var x = 0; x < rowSize; x++, projectsIndex++){\n          // Break if no projects remaining.\n          if(projectsIndex === projects.length) break;\n\n          projectRows[y].push(projects[ projectsIndex ]);\n        }\n\n        // If only one item in row, full size.\n        if(projectRows[y].length === 1){\n          projectRows[y][0].projectCoverImageAspectRatio = 1;\n        }\n      }\n\n      return projectRows;\n    };\n\n  }\n\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .service('ProjectsService', ProjectsService);\n\n  ProjectsService.$inject = ['$sce', '$http', 'DataMappingService'];\n  function ProjectsService($sce, $http, DataMappingService){\n    var service = this;\n\n    service.allProjectsFilter = undefined;\n    service.designProjectsFilter = \"design\";\n    service.animationProjectsFilter = \"animation\";\n    service.illustrationProjectsFilter = \"illustration\";\n    service.artworkProjectsFilter = \"artwork\";\n    service.miscProjectsFilter = \"misc\";\n\n    ///\n    /// Get all the projects raw data\n    ///\n    service.GetAllProjects = function(callback){\n      $http.get('/api/projects/').then(\n        function(response){\n          if(response.status === 200){\n\n            response.data.sort(function(a, b) {\n              return a.position > b.position;\n            });\n\n            callback(response.data);\n          }\n        },\n        function(response){\n          console.error(\"Something went wrong getting all projects.\");\n          // TODO: Redirect to 404 not found.\n      });\n    };\n\n    ///\n    /// Get a project by its id.\n    ///\n    service.GetProject = function(projectId, callback){\n\n      $http.get('/api/projects/' + projectId).then(\n        function(response){\n          if(response.status === 200){\n            callback(response.data);\n          }\n        },\n        function(response){\n          console.error(\"Something went wrong getting project page \" + projectId);\n          // TODO: Redirect to 404 not found.\n      });\n    };\n\n    ///\n    /// Get a project page by its id.\n    ///\n    service.GetProjectPage = function(projectId, callback){\n\n      $http.get('/api/projects/' + projectId).then(\n        function(response){\n          if(response.status === 200){\n            callback(DataMappingService.MapProjectDataToProjectPageVm(response.data));\n          }\n        },\n        function(response){\n          console.error(\"Something went wrong getting project page \" + projectId);\n          // TODO: Redirect to 404 not found.\n      });\n    };\n\n    ///\n    /// Get all projects as they are needed on the home page.\n    ///\n    service.GetProjectsHomePage = function(category, callback){\n      $http.get('/api/projects/').then(\n        function(response){\n          if(response.status === 200){\n            var filteredProjectsList = FilterProjectsByCategory(response.data, category);\n            var mapped =  DataMappingService.MapProjectsDataToHomePageVm(filteredProjectsList);\n\n            callback(mapped);\n          }\n        },\n        function(response){\n          console.log(\"Something went wrong while getting all projects.\");\n      });\n    };\n\n    ///\n    /// Filter the projects by the provided category.\n    ///\n    var FilterProjectsByCategory = function(projects, category){\n      var filteredProjects = [];\n\n      if(category === service.allProjectsFilter){\n        return projects;\n      }\n\n      for(var i = 0; i < projects.length; i++){\n        // If the project category matches, add it to our results.\n        if(projects[i].category === category){\n          filteredProjects.push(projects[i]);\n        }\n      }\n\n      return filteredProjects;\n    };\n  }\n\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .service('ResponsiveService', ResponsiveService);\n\n  ResponsiveService.$inject = ['$window'];\n  function ResponsiveService($window){\n    var service = this;\n\n    var smallScreenMax = 900;\n    var mediumScreenMax = 1500;\n\n    ///\n    /// Get the number of projects we want to show in a row based on how\n    /// big the screen is.\n    ///\n    service.GetHomePageRowSize = function(){\n      var rowSize = 1;\n\n      if($window.innerWidth > smallScreenMax){\n        rowSize = 2;\n      }\n\n      if($window.innerWidth > mediumScreenMax){\n        rowSize = 3;\n      }\n\n      return rowSize;\n    };\n  }\n\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .service('UploadService', UploadService);\n\n    UploadService.$inject = ['$http', 'AuthentictionService'];\n    function UploadService($http, AuthentictionService){\n      service = this;\n\n      service.uploadImage = function(fileData, successCB, errorCB){\n\n        var fd = new FormData();\n        fd.append('file', fileData);\n        $http.post(\"/api/upload\", fd, {\n            transformRequest: angular.identity,\n            headers: {\n              'Content-Type': undefined,\n              Authorization: 'Bearer ' + AuthentictionService.getToken()\n            }\n        })\n        .success(function(response){\n          successCB(response);\n        })\n        .error(function(response){\n          errorCB(response);\n        });\n      };\n\n    }\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .controller('dashboardController', dashboardController);\n\n  dashboardController.$inject = ['$scope', '$location', '$http', 'ProjectsService', 'AuthentictionService'];\n  function dashboardController($scope, $location, $http, ProjectsService, AuthentictionService){\n\n    var viewModel = this;\n    viewModel.projects = [];\n    viewModel.projectToDelete = {};\n\n    // Immediatelly check if a user is logged in, otherwise leave.\n    if(AuthentictionService.isLoggedIn() === false){\n      $location.path('/login');\n    }\n\n    ///\n    /// Request the projects to disply on the home page.\n    ///\n    ProjectsService.GetAllProjects(function(projects){\n      viewModel.projects = projects;\n    });\n\n    viewModel.markForDelete = function(index){\n      viewModel.projectToDelete = viewModel.projects[index];\n    };\n\n    viewModel.deleteProject = function(){\n      $http.delete('/api/projects/' + viewModel.projectToDelete._id, {\n        headers: {\n          Authorization: 'Bearer ' + AuthentictionService.getToken()\n        }\n      }).then(\n        function(response){\n\n          // Refresh projects list.\n          ProjectsService.GetAllProjects(function(projects){\n            viewModel.projects = projects;\n          });\n        },\n        function(response){\n          console.err(\"Something went wrong deleting a profile.\");\n      });\n    };\n  }\n\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .controller('newProjectController', newProjectController);\n\n  newProjectController.$inject = ['$scope', '$location', '$http', '$routeParams', 'AuthentictionService', 'UploadService' ,'ProjectsService'];\n  function newProjectController($scope, $location, $http, $routeParams, AuthentictionService, UploadService, ProjectsService){\n    var viewModel = this;\n\n    // Immediatelly check if a user is logged in, otherwise leave.\n    if(AuthentictionService.isLoggedIn() === false){\n      $location.path('/login');\n    }\n\n    viewModel.isNew = false;\n    if($location.absUrl().indexOf('newProject') > -1){\n      viewModel.isNew = true;\n    }\n\n    viewModel.formMessageHeader = \"\";\n    viewModel.formError = \"\";\n    viewModel.created = false;\n    viewModel.newProject = {};\n    viewModel.fileData = {};\n\n    ///\n    /// Initialize variables if we're editing\n    ///\n    if(viewModel.isNew === false){\n      var projectid = $routeParams.projectid;\n      ProjectsService.GetProject(projectid, function(project){\n        viewModel.newProject = project;\n      });\n    }\n\n    ///\n    /// Add the project to our db.\n    ///\n    viewModel.createProject = function(){\n\n      viewModel.newProject.projectCoverImageAspectRatio = getAspectRatio(\"#projectCoverImage\");\n\n      $http.post('/api/projects', viewModel.newProject, {\n        headers: {\n          Authorization: 'Bearer ' + AuthentictionService.getToken()\n        }\n      }).then(\n        function(response){\n          viewModel.formMessageHeader = \"Success!\";\n          viewModel.formError = \"Project created.\";\n          viewModel.created = true;\n          $location.path('/admin');\n        },\n        function(response){\n          viewModel.formMessageHeader = \"Oops!\";\n          viewModel.formError = \"Something went wrong trying to create project. \" + response.data;\n          viewModel.created = false;\n        }\n      );\n    };\n\n    viewModel.editProject = function(){\n      var projectid = $routeParams.projectid;\n\n      viewModel.newProject.projectCoverImageAspectRatio = getAspectRatio('#projectCoverImage');\n\n      $http.put('/api/projects/' + projectid, viewModel.newProject, {\n        headers: {\n          Authorization: 'Bearer ' + AuthentictionService.getToken()\n        }\n      }).then(\n        function(response){\n          viewModel.formMessageHeader = \"Success!\";\n          viewModel.formError = \"Project updated.\";\n          viewModel.created = true;\n          $location.path('/admin');\n        },\n        function(response){\n          viewModel.formMessageHeader = \"Oops!\";\n          viewModel.formError = \"Something went wrong trying to save this project. \" + response.data;\n          viewModel.created = false;\n      });\n    };\n\n    viewModel.uploadProjectCoverImage = function(){\n      UploadService.uploadImage(viewModel.newProject.projectCoverImage,\n        function(response){\n          viewModel.newProject.projectCoverImage = response.filepath;\n        },\n        function(response){\n          console.log(\"something went wrong trying to upload file.\");\n      });\n    };\n\n    viewModel.uploadBlogItemCoverImage = function(index){\n      UploadService.uploadImage(viewModel.newProject.pageItems[index].content,\n        function(response){\n          viewModel.newProject.pageItems[index].content = response.filepath;\n        },\n        function(response){\n          console.log(\"something went wrong trying to upload file.\");\n      });\n    };\n\n    viewModel.uploadToGallery = function(index){\n      UploadService.uploadImage(viewModel.fileData,\n        function(response){\n          viewModel.newProject.pageItems[index].contentArray.push(response.filepath);\n        },\n        function(response){\n          console.log(\"something went wrong trying to upload file.\");\n      });\n    };\n\n    viewModel.addNewPageItem = function(){\n      if(viewModel.newProject.pageItems === undefined){\n        viewModel.newProject.pageItems = [];\n      }\n\n      viewModel.newProject.pageItems.push({\n        position: 0,\n        content: \"\",\n        contentArray: []\n      });\n    };\n\n    viewModel.removePageItem = function(index){\n      viewModel.newProject.pageItems.splice(index, 1);\n    };\n\n    viewModel.resetProject = function(){\n      viewModel.newProject = {};\n    };\n\n    var getAspectRatio = function(elementQuery){\n      var screenImage = $(\"#projectCoverImage\");\n      var theImage = new Image();\n      theImage.src = screenImage.attr(\"src\");\n\n      var aspect = theImage.width / theImage.height;\n\n      return aspect;\n    };\n  }\n\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('embededVideo', embededVideo);\n\n  function embededVideo(){\n    return{\n      restrict:'EA',\n      scope:{\n        embededUrl: '=embededUrl'\n      },\n      templateUrl: '/common/directives/embededVideo/embededVideo.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('fileModel', ['$parse', fileModel]);\n\n  function fileModel($parse){\n    return{\n      restrict:'A',\n      link: function(scope, element, attrs){\n        var model = $parse(attrs.fileModel);\n        var modelSetter = model.assign;\n\n        element.bind('change', function(){\n          scope.$apply(function(){\n            modelSetter(scope, element[0].files[0]);\n          });\n        });\n      }\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .controller('imageGalleryController', imageGalleryController)\n    .directive('imageGallery', imageGallery);\n\n  function imageGallery(){\n    return{\n      restrict:'EA',\n      scope:{\n        content: '=content',\n        selectedImage: '=selectedImage'\n      },\n      templateUrl: '/common/directives/imageGallery/imageGallery.directive.html',\n      controller: imageGalleryController,\n      controllerAs: 'ctrl'\n    };\n  }\n\n  ///\n  /// Define a controller for this image gallery to use.\n  ///\n  imageGalleryController.$inject = ['$scope', '$window'];\n  function imageGalleryController($scope, $window){\n    var ctrl = this;\n    var tinyScreenMax = 600;\n    var smallScreenMax = 650;\n    var mediumScreenMax = 1000;\n\n    var GetNumberOfColumns = function(){\n      var numCols = 2;\n\n      //if($window.innerWidth > tinyScreenMax){\n        numCols = 2;\n      //}\n      if($window.innerWidth > smallScreenMax){\n        numCols = 3;\n      }\n      if($window.innerWidth > mediumScreenMax){\n        numCols = 4;\n      }\n\n      return numCols;\n    };\n\n    // For row resize.\n    var currentWidth = $window.innerWidth;\n    var numColumns = GetNumberOfColumns();\n\n    // Never really want more than 4 columns or balance starts to look shit.\n    ctrl.lightboxImage = \"\";\n\n    ctrl.GalleryThumbClick = function(image){\n      // Set modal image\n      $scope.selectedImage = image;\n    };\n\n    angular.element($window).bind('resize', function () {\n\n      // Don't resize if width hasn't changed.\n      if($window.innerWidth === currentWidth){\n        return;\n      }\n\n      // Don't resize if we don't actually need to adjust row size.\n      if(numColumns === GetNumberOfColumns()){\n        return;\n      }\n\n      currentWidth = $window.innerWidth;\n      numColumns = GetNumberOfColumns();\n\n      console.log(\"resizing\");\n      // Possiblity to cache here... if necessary.\n      ctrl.imageThumbs = FormatImageList($scope.content); // format images with new number of columns based on screen size.\n      $scope.$apply(); // This is needed here... will occasionally update on its own.\n    });\n\n    var FormatImageList = function(images){\n      var columns = [];\n      var numColumns = GetNumberOfColumns();\n      var rows = Math.ceil(images.length / numColumns);\n\n      var imagesIndex = 0;\n      for (var y = 0; y < rows; y++) {\n        for(var x = 0; x < numColumns; x++, imagesIndex++){\n          if(columns[x] === undefined){\n            columns.push([]);\n          }\n\n          // Break if no projects remaining.\n          if(imagesIndex === images.length) break;\n\n          columns[x].push(images[ imagesIndex ]);\n        }\n      }\n\n      return columns;\n    };\n\n    ctrl.imageThumbs = FormatImageList($scope.content);\n  }\n\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('adminHeader', adminHeader);\n\n  function adminHeader(){\n    return{\n      restrict:'EA',\n      templateUrl: '/common/directives/adminHeader/adminHeader.directive.html',\n      scope:{\n        title: '@title'\n      },\n      controller: adminHeaderController,\n      controllerAs: 'viewModel'\n    };\n  }\n\n  ///\n  /// Define a controller for this image gallery to use.\n  ///\n  adminHeaderController.$inject = ['$location', 'AuthentictionService'];\n  function adminHeaderController($location, AuthentictionService){\n    var viewModel = this;\n\n    viewModel.logout = function(){\n      AuthentictionService.logout();\n      $location.path('/');\n    };\n  }\n\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('imageLightbox', imageLightbox);\n\n  function imageLightbox(){\n    return{\n      restrict:'EA',\n      scope:{\n        content: '=content'\n      },\n      templateUrl: '/common/directives/imageLightbox/imageLightbox.directive.html',\n      controller: imageLightboxController,\n      controllerAs: 'viewModel'\n    };\n  }\n\n  imageLightboxController.$inject = [];\n  function imageLightboxController(){\n    var ctrl = this;\n    ctrl.imageWidth = \"\";\n\n    $(document).ready(function(){\n\n      $('#lightbox').on('shown.bs.modal', function () {\n\n        var screenImage = $(\"#lightbox img\");\n        var theImage = new Image();\n        theImage.src = screenImage.attr(\"src\");\n        ctrl.imageWidth = theImage.width;\n\n        $(this).find(\".modal-dialog\").css(\"width\", ctrl.imageWidth);\n      });\n    });\n  }\n\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('coverImage', coverImage);\n\n  function coverImage(){\n    return{\n      restrict:'EA',\n      scope:{\n        content: '=content'\n      },\n      templateUrl: '/common/directives/coverImage/coverImage.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('navigationBar', navigationBar);\n\n  function navigationBar(){\n    return{\n      restrict:'EA',\n      templateUrl: '/common/directives/navigationBar/navigationBar.directive.html',\n      controller: navigationBarController,\n      controllerAs: 'ctrl'\n    };\n  }\n\n  navigationBarController.$inject = ['$location'];\n  function navigationBarController($location){\n    var ctrl = this;\n\n    ctrl.isActive = function(path){\n      if(path.length === 1){\n        // If checking if we're on homepage...\n        return $location.path() === '/' && $location.search().category === undefined;\n      }\n\n      return $location.absUrl().indexOf(path) != -1;\n    };\n  }\n\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('textBlock', textBlock);\n\n  function textBlock(){\n    return{\n      restrict:'EA',\n      scope:{\n        content: '=content'\n      },\n      templateUrl: '/common/directives/textBlock/textBlock.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('underlinePageBreak', underlinePageBreak);\n\n  function underlinePageBreak(){\n    return{\n      restrict:'EA',\n      templateUrl: '/common/directives/pageBreak/underline.directive.html'\n    };\n  }\n})();\n"],"sourceRoot":"/source/"}