{"version":3,"sources":["about/about.controller.js","login/login.controller.js","app.js","home/home.controller.js","projectPage/projectPage.controller.js","admin/dashboard/dashboard.controller.js","admin/newProject/newProject.controller.js","common/services/authentication.service.js","common/services/dataMappingService.js","common/services/projectsService.js","common/services/responsiveService.js","common/services/upload.service.js","common/directives/adminHeader/adminHeader.directive.js","common/directives/coverImage/coverImage.directive.js","common/directives/embededVideo/embededVideo.directive.js","common/directives/fileModel/fileModel.directive.js","common/directives/imageGallery/imageGallery.directive.js","common/directives/imageLightbox/imageLightbox.directive.js","common/directives/navigationBar/navigationBar.directive.js","common/directives/textBlock/textBlock.directive.js","common/directives/pageBreak/underline.directive.js"],"names":["aboutController","$scope","viewModel","this","myVariable","loginCtrl","$location","AuthentictionService","pageHeader","title","credentials","username","password","returnPage","onSubmit","formError","doLogin","login","error","err","message","then","path","config","$routeProvider","$locationProvider","when","templateUrl","controller","controllerAs","otherwise","redirectTo","html5Mode","angular","module","$inject","homeController","$window","$sce","ProjectsService","categoryFilter","search","category","videoLink","trustAsResourceUrl","showVideo","undefined","GetProjectsHomePage","projectsVm","projects","element","bind","projectPageController","$routeParams","projectId","projectid","scrollTo","GetProjectPage","pageData","blogItems","dashboardController","$http","projectToDelete","isLoggedIn","GetAllProjects","markForDelete","index","deleteProject","_id","headers","Authorization","getToken","response","console","newProjectController","UploadService","formMessageHeader","created","newProject","fileData","createProject","aspect","$","width","height","projectCoverImageAspectRatio","log","post","data","uploadProjectCoverImage","uploadImage","projectCoverImage","filepath","uploadBlogItemCoverImage","pageItems","content","uploadToGallery","contentArray","push","addNewPageItem","position","saveToken","token","localStorage","user","success","logout","removeItem","payload","JSON","parse","atob","split","exp","Date","now","service","DataMappingService","ResponsiveService","MapProjectDataToProjectPageVm","sort","a","b","i","length","type","MapProjectsDataToHomePageVm","Array","isArray","rowSize","GetHomePageRowSize","projectRows","rows","projectsIndex","y","x","allProjectsFilter","filmProjectsFilter","artProjectsFilter","callback","get","status","filteredProjectsList","FilterProjectsByCategory","mapped","filteredProjects","smallScreenMax","mediumScreenMax","innerWidth","successCB","errorCB","fd","FormData","append","transformRequest","identity","Content-Type","adminHeader","restrict","scope","adminHeaderController","directive","coverImage","embededVideo","embededUrl","fileModel","$parse","link","attrs","model","modelSetter","assign","$apply","files","imageGallery","selectedImage","imageGalleryController","ctrl","lightboxImage","GalleryThumbClick","image","imageThumbs","FormatImageList","GetNumberOfColumns","numCols","images","columns","numColumns","Math","ceil","imagesIndex","imageLightbox","navigationBar","textBlock","underlinePageBreak"],"mappings":"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","file":"dist.min.js","sourcesContent":["angular\n  .module('PortfolioSPAModule')\n  .controller('aboutController', aboutController);\n\naboutController.$inject = ['$scope'];\nfunction aboutController($scope){\n  var viewModel = this;\n\n  viewModel.myVariable = \"I'm pretty cool, I guess.\";\n}\n","angular\n  .module('PortfolioSPAModule')\n  .controller('loginCtrl', loginCtrl);\n\nloginCtrl.$inject = ['$location', 'AuthentictionService'];\nfunction loginCtrl($location, AuthentictionService){\n  var viewModel = this;\n\n  viewModel.pageHeader = {\n    title: 'Admin Sign In'\n  };\n\n  viewModel.credentials = {\n    username: \"\",\n    password: \"\"\n  };\n\n  viewModel.returnPage = '/admin'; // Go to admin page once logged in.\n  viewModel.onSubmit = function(){\n    viewModel.formError = \"\";\n    if(!viewModel.credentials.username || !viewModel.credentials.password){\n      viewModel.formError = \"All fields required.\";\n      return false;\n    }\n    else{\n      viewModel.doLogin();\n    }\n  };\n\n  viewModel.doLogin = function(){\n    viewModel.formError = \"\";\n    AuthentictionService\n      .login(viewModel.credentials)\n      .error(function(err){\n        viewModel.formError = err.message;\n      })\n      .then(function(){\n        //$location.search('page', null); no need to get query param for return page.\n        $location.path(viewModel.returnPage);\n      });\n  };\n}\n","/*\n* Angular application.\n*/\n\n(function(){\n\n  // Define the app module and it's dependencies.\n  angular.module('PortfolioSPAModule', ['ngRoute']);\n\n  // Create a config for our app -- configure our routes.\n  function config ($routeProvider, $locationProvider){\n    $routeProvider\n      .when('/', {\n        templateUrl: 'home/home.view.html',\n        controller: 'homeController',\n        controllerAs: 'viewModel'\n      })\n      .when('/about', {\n        templateUrl: 'about/about.view.html',\n        controller: 'aboutController',\n        controllerAs: 'viewModel'\n      })\n      .when('/projects/:projectid', {\n        templateUrl: 'projectPage/projectPage.view.html',\n        controller: 'projectPageController',\n        controllerAs: 'viewModel'\n      })\n      .when('/login', {\n        templateUrl: '/login/login.view.html',\n        controller: 'loginCtrl',\n        controllerAs: 'viewModel'\n      })\n      .when('/admin', {\n        templateUrl: '/admin/dashboard/dashboard.view.html',\n        controller: 'dashboardController',\n        controllerAs: 'viewModel'\n      })\n      .when('/admin/newProject', {\n        templateUrl: '/admin/newProject/newProject.view.html',\n        controller: 'newProjectController',\n        controllerAs: 'viewModel'\n      })\n      .otherwise({redirectTo: '/'});\n\n    // Pretty up URLs. Base defined in index.html.\n    $locationProvider.html5Mode(true);\n  }\n\n  // Add the config to our app.\n  angular\n    .module('PortfolioSPAModule')\n    .config(['$routeProvider', '$locationProvider', config]);\n\n})();\n","// Using function scopes to prevent global scope variables.\n// God, I can't wait to use typescript.\n(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .controller('homeController', homeController);\n\n  homeController.$inject = ['$scope', '$window', '$location', '$sce', 'ProjectsService'];\n  function homeController($scope, $window, $location, $sce, ProjectsService){\n    var viewModel = this;\n    var categoryFilter = $location.search().category; // Once per 'page load'\n\n    viewModel.videoLink = $sce.trustAsResourceUrl(\"https://www.youtube.com/embed/CJ_GCPaKywg\");\n    viewModel.showVideo = categoryFilter === undefined; // Promo on 'all' page.\n\n    ///\n    /// Request the projects to disply on the home page.\n    ///\n    ProjectsService.GetProjectsHomePage(categoryFilter, function(projectsVm){\n      viewModel.projects = projectsVm;\n    });\n\n    ///\n    /// Re-get the projects if page is resized (getting projects will rebuild the rows\n    /// according to screen size).\n    /// TODO: Only get projects when resizing is done so we're not making a million calls.\n    ///\n    angular.element($window).bind('resize', function () {\n      // Possiblity to cache here... if necessary.\n      ProjectsService.GetProjectsHomePage(categoryFilter, function(projectsVm){\n        viewModel.projects = projectsVm;\n        //$scope.$apply(); // Not needed... two way bind automatically digests.\n      });\n    });\n  }\n\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .controller('projectPageController', projectPageController);\n\n  projectPageController.$inject = ['$window', '$routeParams', 'ProjectsService'];\n  function projectPageController($window, $routeParams, ProjectsService){\n    var viewModel = this;\n\n    viewModel.projectId = $routeParams.projectid;\n\n    // Make sure we always start at the top of the page.\n    $window.scrollTo(0, 0);\n\n    ProjectsService.GetProjectPage($routeParams.projectid, function(pageData){\n      viewModel.blogItems = pageData;\n    });\n  }\n\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .controller('dashboardController', dashboardController);\n\n  dashboardController.$inject = ['$scope', '$location', '$http', 'ProjectsService', 'AuthentictionService'];\n  function dashboardController($scope, $location, $http, ProjectsService, AuthentictionService){\n\n    var viewModel = this;\n    viewModel.projects = [];\n    viewModel.projectToDelete = {};\n\n    // Immediatelly check if a user is logged in, otherwise leave.\n    if(AuthentictionService.isLoggedIn() === false){\n      $location.path('/login');\n    }\n\n    ///\n    /// Request the projects to disply on the home page.\n    ///\n    ProjectsService.GetAllProjects(function(projects){\n      viewModel.projects = projects;\n    });\n\n    viewModel.markForDelete = function(index){\n      viewModel.projectToDelete = viewModel.projects[index];\n    };\n\n    viewModel.deleteProject = function(){\n      $http.delete('/api/projects/' + viewModel.projectToDelete._id, {\n        headers: {\n          Authorization: 'Bearer ' + AuthentictionService.getToken()\n        }\n      }).then(\n        function(response){\n\n          // Refresh projects list.\n          ProjectsService.GetAllProjects(function(projects){\n            viewModel.projects = projects;\n          });\n        },\n        function(response){\n          console.err(\"Something went wrong deleting a profile.\");\n      });\n    };\n  }\n\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .controller('newProjectController', newProjectController);\n\n  newProjectController.$inject = ['$scope', '$location', '$http', 'AuthentictionService', 'UploadService'];\n  function newProjectController($scope, $location, $http, AuthentictionService, UploadService){\n    var viewModel = this;\n\n    // Immediatelly check if a user is logged in, otherwise leave.\n    if(AuthentictionService.isLoggedIn() === false){\n      $location.path('/login');\n    }\n\n    viewModel.formMessageHeader = \"\";\n    viewModel.formError = \"\";\n    viewModel.created = false;\n    viewModel.newProject = {};\n    viewModel.fileData = {};\n\n    viewModel.createProject = function(){\n      var aspect = $('#projectCoverImage').width() / $('#projectCoverImage').height();\n      viewModel.newProject.projectCoverImageAspectRatio = aspect;\n\n      console.log(viewModel.newProject);\n\n      $http.post('/api/projects', viewModel.newProject, {\n        headers: {\n          Authorization: 'Bearer ' + AuthentictionService.getToken()\n        }\n      }).then(\n        function(response){\n          viewModel.formMessageHeader = \"Success!\";\n          viewModel.formError = \"Project created.\";\n          viewModel.created = true;\n          $location.path('/admin');\n        },\n        function(response){\n          viewModel.formMessageHeader = \"Oops!\";\n          viewModel.formError = \"Something went wrong trying to create project. \" + response.data.message;\n          viewModel.created = false;\n        }\n      );\n    };\n\n    viewModel.uploadProjectCoverImage = function(){\n      UploadService.uploadImage(viewModel.newProject.projectCoverImage,\n        function(response){\n          viewModel.newProject.projectCoverImage = response.filepath;\n        },\n        function(response){\n          console.log(\"something went wrong trying to upload file.\");\n      });\n    };\n\n    viewModel.uploadBlogItemCoverImage = function(index){\n      UploadService.uploadImage(viewModel.newProject.pageItems[index].content,\n        function(response){\n          viewModel.newProject.pageItems[index].content = response.filepath;\n        },\n        function(response){\n          console.log(\"something went wrong trying to upload file.\");\n      });\n    };\n\n    viewModel.uploadToGallery = function(index){\n      UploadService.uploadImage(viewModel.fileData,\n        function(response){\n          viewModel.newProject.pageItems[index].contentArray.push(response.filepath);\n        },\n        function(response){\n          console.log(\"something went wrong trying to upload file.\");\n      });\n    };\n\n    viewModel.addNewPageItem = function(){\n      if(viewModel.newProject.pageItems === undefined){\n        viewModel.newProject.pageItems = [];\n      }\n\n      viewModel.newProject.pageItems.push({\n        position: 0,\n        content: \"\",\n        contentArray: []\n      });\n    };\n  }\n\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .service('AuthentictionService', AuthentictionService);\n\n    AuthentictionService.$inject = ['$window', '$http'];\n    function AuthentictionService($window, $http){\n      var saveToken = function(token){\n        $window.localStorage['admin-token'] = token;\n      };\n\n      var getToken = function(){\n        return $window.localStorage['admin-token'];\n      };\n\n      var login = function(user){\n        return $http.post('/api/login', user).success(function(data){\n          saveToken(data.token);\n        });\n      };\n\n      var logout = function(){\n        $window.localStorage.removeItem('admin-token');\n      };\n\n      var isLoggedIn = function(){\n        var token = getToken();\n\n        if(token){\n          var payload = JSON.parse($window.atob(token.split('.')[1]));\n\n          return payload.exp > Date.now() / 1000;\n        }\n        else{\n          return false;\n        }\n      };\n\n      var currentUser = function(){\n        if(isLoggedIn()){\n          var token = getToken();\n          var payload = JSON.parse($window.atob(token.split('.')[1]));\n          return {\n            username: payload.username\n          };\n        }\n      };\n\n      return {\n        login: login,\n        logout: logout,\n        isLoggedIn: isLoggedIn,\n        saveToken: saveToken,\n        getToken: getToken\n      };\n    }\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .service('DataMappingService', DataMappingService);\n\n  DataMappingService.$inject = ['$sce', 'ResponsiveService'];\n  function DataMappingService($sce, ResponsiveService){\n    var service = this;\n\n    ///\n    /// Map the data returned by a project page to its view model.\n    ///\n     service.MapProjectDataToProjectPageVm = function(data){\n      var blogItems = data.pageItems;\n\n      // Sort the list by position\n      blogItems.sort(function(a, b) {\n        return a.position > b.position;\n      });\n\n      // Trust all video links as secure.\n      for(var i = 0; i < data.pageItems.length; i++){\n        if(data.pageItems[i].type === \"video\"){\n          data.pageItems[i].content = $sce.trustAsResourceUrl(data.pageItems[i].content);\n        }\n      }\n\n      return blogItems;\n    };\n\n    ///\n    /// Take an array of projects and map them to a 2D array of relevent\n    /// project info to be used by the view.\n    ///\n    service.MapProjectsDataToHomePageVm = function(projects){\n      if(projects === undefined){\n        console.error(\"projects is undefined.\");\n        return;\n      }\n\n      if(projects.length === 0){\n        console.error(\"No projects in the projects array.\");\n        return;\n      }\n\n      if(Array.isArray(projects) === false){\n        console.error(\"Array of projects not provided.\");\n        return;\n      }\n\n      projects.sort(function(a, b) {\n        return a.position > b.position;\n      });\n\n      var rowSize = ResponsiveService.GetHomePageRowSize();\n      var projectRows = [];\n      var rows = projects.length / rowSize;\n\n      if(rows === 0) rows = 1;\n\n      var projectsIndex = 0;\n      for (var y = 0; y < rows; y++) {\n        projectRows.push([]);\n\n        for(var x = 0; x < rowSize; x++, projectsIndex++){\n          // Break if no projects remaining.\n          if(projectsIndex === projects.length) break;\n\n          projectRows[y].push(projects[ projectsIndex ]);\n        }\n      }\n\n      return projectRows;\n    };\n\n  }\n\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .service('ProjectsService', ProjectsService);\n\n  ProjectsService.$inject = ['$sce', '$http', 'DataMappingService'];\n  function ProjectsService($sce, $http, DataMappingService){\n    var service = this;\n\n    service.allProjectsFilter = undefined;\n    service.filmProjectsFilter = \"film\";\n    service.artProjectsFilter = \"art\";\n\n    ///\n    /// Get all the projects raw data\n    ///\n    service.GetAllProjects = function(callback){\n      $http.get('/api/projects/').then(\n        function(response){\n          if(response.status === 200){\n\n            response.data.sort(function(a, b) {\n              return a.position > b.position;\n            });\n\n            callback(response.data);\n          }\n        },\n        function(response){\n          console.error(\"Something went wrong getting all projects.\");\n          // TODO: Redirect to 404 not found.\n      });\n    };\n\n    ///\n    /// Get a project page by its id.\n    ///\n    service.GetProjectPage = function(projectId, callback){\n\n      $http.get('/api/projects/' + projectId).then(\n        function(response){\n          if(response.status === 200){\n            callback(DataMappingService.MapProjectDataToProjectPageVm(response.data));\n          }\n        },\n        function(response){\n          console.error(\"Something went wrong getting project page \" + projectId);\n          // TODO: Redirect to 404 not found.\n      });\n    };\n\n    ///\n    /// Get all projects as they are needed on the home page.\n    ///\n    service.GetProjectsHomePage = function(category, callback){\n\n      if(category !== service.allProjectsFilter &&\n        category !== service.filmProjectsFilter &&\n        category !== service.artProjectsFilter){\n          console.error(\"Invalid category provided: \" + category);\n          return;\n      }\n\n      $http.get('/api/projects/').then(\n        function(response){\n          if(response.status === 200){\n            var filteredProjectsList = FilterProjectsByCategory(response.data, category);\n            var mapped =  DataMappingService.MapProjectsDataToHomePageVm(filteredProjectsList);\n\n            callback(mapped);\n          }\n        },\n        function(response){\n          console.log(\"Something went wrong while getting all projects.\");\n      });\n    };\n\n    ///\n    /// Filter the projects by the provided category.\n    ///\n    var FilterProjectsByCategory = function(projects, category){\n      var filteredProjects = [];\n\n      if(category === service.allProjectsFilter){\n        return projects;\n      }\n\n      for(var i = 0; i < projects.length; i++){\n        // If the project category matches, add it to our results.\n        if(projects[i].category === category){\n          filteredProjects.push(projects[i]);\n        }\n      }\n\n      return filteredProjects;\n    };\n  }\n\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .service('ResponsiveService', ResponsiveService);\n\n  ResponsiveService.$inject = ['$window'];\n  function ResponsiveService($window){\n    var service = this;\n\n    var smallScreenMax = 900;\n    var mediumScreenMax = 1500;\n\n    ///\n    /// Get the number of projects we want to show in a row based on how\n    /// big the screen is.\n    ///\n    service.GetHomePageRowSize = function(){\n      var rowSize = 1;\n\n      if($window.innerWidth > smallScreenMax){\n        rowSize = 2;\n      }\n\n      if($window.innerWidth > mediumScreenMax){\n        rowSize = 3;\n      }\n\n      return rowSize;\n    };\n  }\n\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .service('UploadService', UploadService);\n\n    UploadService.$inject = ['$http', 'AuthentictionService'];\n    function UploadService($http, AuthentictionService){\n      service = this;\n\n      service.uploadImage = function(fileData, successCB, errorCB){\n\n        var fd = new FormData();\n        fd.append('file', fileData);\n        $http.post(\"/api/upload\", fd, {\n            transformRequest: angular.identity,\n            headers: {\n              'Content-Type': undefined,\n              Authorization: 'Bearer ' + AuthentictionService.getToken()\n            }\n        })\n        .success(function(response){\n          successCB(response);\n        })\n        .error(function(response){\n          errorCB(response);\n        });\n      };\n\n    }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('adminHeader', adminHeader);\n\n  function adminHeader(){\n    return{\n      restrict:'EA',\n      templateUrl: '/common/directives/adminHeader/adminHeader.directive.html',\n      scope:{\n        title: '@title'\n      },\n      controller: adminHeaderController,\n      controllerAs: 'viewModel'\n    };\n  }\n\n  ///\n  /// Define a controller for this image gallery to use.\n  ///\n  adminHeaderController.$inject = ['$location', 'AuthentictionService'];\n  function adminHeaderController($location, AuthentictionService){\n    var viewModel = this;\n\n    viewModel.logout = function(){\n      AuthentictionService.logout();\n      $location.path('/');\n    };\n  }\n\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('coverImage', coverImage);\n\n  function coverImage(){\n    return{\n      restrict:'EA',\n      scope:{\n        content: '=content'\n      },\n      templateUrl: '/common/directives/coverImage/coverImage.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('embededVideo', embededVideo);\n\n  function embededVideo(){\n    return{\n      restrict:'EA',\n      scope:{\n        embededUrl: '=embededUrl'\n      },\n      templateUrl: '/common/directives/embededVideo/embededVideo.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('fileModel', ['$parse', fileModel]);\n\n  function fileModel($parse){\n    return{\n      restrict:'A',\n      link: function(scope, element, attrs){\n        var model = $parse(attrs.fileModel);\n        var modelSetter = model.assign;\n\n        element.bind('change', function(){\n          scope.$apply(function(){\n            modelSetter(scope, element[0].files[0]);\n          });\n        });\n      }\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .controller('imageGalleryController', imageGalleryController)\n    .directive('imageGallery', imageGallery);\n\n  function imageGallery(){\n    return{\n      restrict:'EA',\n      scope:{\n        content: '=content',\n        selectedImage: '=selectedImage'\n      },\n      templateUrl: '/common/directives/imageGallery/imageGallery.directive.html',\n      controller: imageGalleryController,\n      controllerAs: 'ctrl'\n    };\n  }\n\n  ///\n  /// Define a controller for this image gallery to use.\n  ///\n  imageGalleryController.$inject = ['$scope', '$window'];\n  function imageGalleryController($scope, $window){\n    var ctrl = this;\n    var tinyScreenMax = 600;\n    var smallScreenMax = 650;\n    var mediumScreenMax = 1000;\n    // Never really want more than 4 columns or balance starts to look shit.\n    ctrl.lightboxImage = \"\";\n\n    ctrl.GalleryThumbClick = function(image){\n      // Set modal image\n      $scope.selectedImage = image;\n    };\n\n    angular.element($window).bind('resize', function () {\n      console.log(\"resizing\");\n      // Possiblity to cache here... if necessary.\n      ctrl.imageThumbs = FormatImageList($scope.content); // format images with new number of columns based on screen size.\n      $scope.$apply(); // This is needed here... will occasionally update on its own.\n    });\n\n    var GetNumberOfColumns = function(){\n      var numCols = 2;\n\n      //if($window.innerWidth > tinyScreenMax){\n        numCols = 2;\n      //}\n      if($window.innerWidth > smallScreenMax){\n        numCols = 3;\n      }\n      if($window.innerWidth > mediumScreenMax){\n        numCols = 4;\n      }\n\n      return numCols;\n    };\n\n    var FormatImageList = function(images){\n      var columns = [];\n      var numColumns = GetNumberOfColumns();\n      var rows = Math.ceil(images.length / numColumns);\n\n      var imagesIndex = 0;\n      for (var y = 0; y < rows; y++) {\n        for(var x = 0; x < numColumns; x++, imagesIndex++){\n          if(columns[x] === undefined){\n            columns.push([]);\n          }\n\n          // Break if no projects remaining.\n          if(imagesIndex === images.length) break;\n\n          columns[x].push(images[ imagesIndex ]);\n        }\n      }\n\n      return columns;\n    };\n\n    ctrl.imageThumbs = FormatImageList($scope.content);\n  }\n\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('imageLightbox', imageLightbox);\n\n  function imageLightbox(){\n    return{\n      restrict:'EA',\n      scope:{\n        content: '=content'\n      },\n      templateUrl: '/common/directives/imageLightbox/imageLightbox.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('navigationBar', navigationBar);\n\n  function navigationBar(){\n    return{\n      restrict:'EA',\n      templateUrl: '/common/directives/navigationBar/navigationBar.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('textBlock', textBlock);\n\n  function textBlock(){\n    return{\n      restrict:'EA',\n      scope:{\n        content: '=content'\n      },\n      templateUrl: '/common/directives/textBlock/textBlock.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('underlinePageBreak', underlinePageBreak);\n\n  function underlinePageBreak(){\n    return{\n      restrict:'EA',\n      templateUrl: '/common/directives/pageBreak/underline.directive.html'\n    };\n  }\n})();\n"],"sourceRoot":"/source/"}