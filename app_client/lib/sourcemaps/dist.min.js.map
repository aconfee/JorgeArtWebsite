{"version":3,"sources":["about/about.controller.js","app.js","home/home.controller.js","common/services/projectsGallery.service.js","common/directives/exampleDirective/example.directive.js","common/directives/pageBreak/underline.directive.js","common/directives/navigationBar/navigationBar.directive.js"],"names":["aboutController","$scope","viewModel","this","myVariable","config","$routeProvider","$locationProvider","when","templateUrl","controller","controllerAs","otherwise","redirectTo","html5Mode","angular","module","$inject","homeController","$window","ProjectsGalleryService","currentProjectsCategoryFilter","allProjectsFilter","projects","GetProjects","element","bind","$apply","exampleData","exampleItem","categoryFilter","filmProjectsFilter","artProjectsFilter","console","error","service","smallScreenMax","mediumScreenMax","category","projectsDto","id","name","image","aspect","filteredProjectsList","FilterProjectsByCategory","MapProjectsDtoToVm","filteredProjects","i","length","push","GetRowSize","rowSize","innerWidth","undefined","Array","isArray","projectGroups","rows","y","x","projectsIndex","exampleDirective","restrict","scope","content","directive","underlinePageBreak","navigationBar"],"mappings":"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","file":"dist.min.js","sourcesContent":["angular\n  .module('PortfolioSPAModule')\n  .controller('aboutController', aboutController);\n\naboutController.$inject = ['$scope'];\nfunction aboutController($scope){\n  var viewModel = this;\n\n  viewModel.myVariable = \"I'm pretty cool, I guess.\";\n}\n","/*\n* Angular application.\n*/\n\n(function(){\n\n  // Define the app module and it's dependencies.\n  angular.module('PortfolioSPAModule', ['ngRoute']);\n\n  // Create a config for our app -- configure our routes.\n  function config ($routeProvider, $locationProvider){\n    $routeProvider\n      .when('/', {\n        templateUrl: 'home/home.view.html',\n        controller: 'homeController',\n        controllerAs: 'viewModel'\n      })\n      .when('/about', {\n        templateUrl: 'about/about.view.html',\n        controller: 'aboutController',\n        controllerAs: 'viewModel'\n      })\n      .otherwise({redirectTo: '/'});\n\n    // Pretty up URLs. Base defined in index.html.\n    $locationProvider.html5Mode(true);\n  }\n\n  // Add the config to our app.\n  angular\n    .module('PortfolioSPAModule')\n    .config(['$routeProvider', '$locationProvider', config]);\n\n})();\n","// Using function scopes to prevent global scope variables.\n// God, I can't wait to use typescript.\n(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .controller('homeController', homeController);\n\n  homeController.$inject = ['$scope', '$window', 'ProjectsGalleryService'];\n  function homeController($scope, $window, ProjectsGalleryService){\n    var viewModel = this;\n    var currentProjectsCategoryFilter = ProjectsGalleryService.allProjectsFilter;\n\n    // TODO: Make the main gallery a directive and pass projectRows into it.\n    viewModel.projects = ProjectsGalleryService.GetProjects(currentProjectsCategoryFilter);\n\n    // Turn into a service to return screen width and height.\n    // This service should have a method to just get num of rows that should display.\n    angular.element($window).bind('resize', function () {\n      // Possiblity to cache here... if necessary.\n      viewModel.projects = ProjectsGalleryService.GetProjects(currentProjectsCategoryFilter);\n      $scope.$apply(); // This is needed here... will occasionally update on its own.\n    });\n\n    viewModel.exampleData = {\n      exampleItem: 'Example text from home controller being passed to example-directive.'\n    };\n\n    viewModel.GetProjects = function(categoryFilter){\n      if(categoryFilter != ProjectsGalleryService.allProjectsFilter &&\n        categoryFilter != ProjectsGalleryService.filmProjectsFilter &&\n        categoryFilter != ProjectsGalleryService.artProjectsFilter){\n          console.error(\"Invalid categoryFilter provided: \" + categoryFilter);\n          return;\n      }\n\n      currentProjectsCategoryFilter = categoryFilter;\n      viewModel.projects = ProjectsGalleryService.GetProjects(categoryFilter);\n    };\n  }\n\n})();\n","(function(){\n\n  angular\n    .module('PortfolioSPAModule')\n    .service('ProjectsGalleryService', ProjectsGalleryService);\n\n\n\n  ProjectsGalleryService.$inject = ['$window'];\n  function ProjectsGalleryService($window){\n    var service = this;\n\n    var smallScreenMax = 600;\n    var mediumScreenMax = 1000;\n\n    service.allProjectsFilter = \"ALL\";\n    service.filmProjectsFilter = \"FILM\";\n    service.artProjectsFilter = \"ART\";\n\n    ///\n    /// Call out to our API to get projects.\n    /// Filtr them by the appropriate category.\n    /// Organize them into rows according to screen size.\n    ///\n    service.GetProjects = function(category){\n      // Get aspect ratio and store in db when uploaded.\n      // Replace with $http call.\n      // build another document of data consisting of specific project page.. all\n      // the blog components.\n      var projectsDto = [\n        {\n          \"id\": \"100\", // use this to navigate to specific project url\n          \"name\": \"NoMansSky\", // could be useful\n          \"image\": \"/images/NoMan1.jpg\",\n          \"aspect\": 0.665,\n          \"category\": \"FILM\"\n        },\n        {\n          \"id\": \"101\",\n          \"name\": \"NoMansSky2\",\n          \"image\": \"/images/NoMan2.jpg\",\n          \"aspect\": 1.78,\n          \"category\": \"ART\"\n        },\n        {\n          \"id\": \"102\",\n          \"name\": \"NoMansSky3\",\n          \"image\": \"/images/NoMan3.jpg\",\n          \"aspect\": 1.77,\n          \"category\": \"ART\"\n        },\n        {\n          \"id\": \"103\",\n          \"name\": \"NoMansSky4\",\n          \"image\": \"/images/NoMan4.jpg\",\n          \"aspect\": 1.77,\n          \"category\": \"ART\"\n        },\n        {\n          \"id\": \"104\",\n          \"name\": \"NoMansSky5\",\n          \"image\": \"/images/NoMan5.jpeg\",\n          \"aspect\": 1.777,\n          \"category\": \"ART\"\n        },\n        {\n          \"id\": \"105\",\n          \"name\": \"NoMansSky6\",\n          \"image\": \"/images/NoMan6.jpg\",\n          \"aspect\": 1.77,\n          \"category\": \"FILM\"\n        }\n      ];\n\n      var filteredProjectsList = FilterProjectsByCategory(projectsDto, category);\n      return MapProjectsDtoToVm(filteredProjectsList);\n    };\n\n    ///\n    /// Filter the projects by the provided category.\n    ///\n    var FilterProjectsByCategory = function(projects, category){\n      var filteredProjects = [];\n\n      if(category === service.allProjectsFilter){\n        return projects;\n      }\n\n      for(var i = 0; i < projects.length; i++){\n        // If the project category matches, add it to our results.\n        if(projects[i].category === category){\n          filteredProjects.push(projects[i]);\n        }\n      }\n\n      return filteredProjects;\n    };\n\n    ///\n    /// Get the number of projects we want to show in a row based on how\n    /// big the screen is.\n    ///\n    var GetRowSize = function(){\n      var rowSize = 1;\n\n      if($window.innerWidth > smallScreenMax){\n        rowSize = 2;\n      }\n\n      if($window.innerWidth > mediumScreenMax){\n        rowSize = 3;\n      }\n\n      return rowSize;\n    };\n\n    ///\n    /// Take an array of projects and map them to a 2D array of relevent\n    /// project info to be used by the view.\n    ///\n    var MapProjectsDtoToVm = function(projects){\n      if(projects === undefined){\n        console.error(\"projects is undefined.\");\n        return;\n      }\n\n      if(projects.length === 0){\n        console.error(\"No projects in the projects array.\");\n        return;\n      }\n\n      if(Array.isArray(projects) === false){\n        console.error(\"Array of projects not provided.\");\n        return;\n      }\n\n      var rowSize = GetRowSize();\n      var projectGroups = [];\n      var rows = projects.length / rowSize;\n\n      if(rows === 0) rows = 1;\n\n      for (var y = 0; y < rows; y++) {\n        projectGroups.push([]);\n\n        for(var x = 0; x < rowSize; x++){\n          // Break if no projects remaining.\n          var projectsIndex = (rowSize * y) + x;\n          if(projectsIndex === projects.length) break;\n\n          projectGroups[y].push(projects[ projectsIndex ]);\n        }\n      }\n\n      return projectGroups;\n    };\n\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('exampleDirective', exampleDirective);\n\n  function exampleDirective(){\n    return{\n      restrict:'EA',\n      scope:{\n        content: '=content'\n      },\n      templateUrl: '/common/directives/exampleDirective/example.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('underlinePageBreak', underlinePageBreak);\n\n  function underlinePageBreak(){\n    return{\n      restrict:'EA',\n      templateUrl: '/common/directives/pageBreak/underline.directive.html'\n    };\n  }\n})();\n","(function(){\n  angular\n    .module('PortfolioSPAModule')\n    .directive('navigationBar', navigationBar);\n\n  function navigationBar(){\n    return{\n      restrict:'EA',\n      templateUrl: '/common/directives/navigationBar/navigationBar.directive.html'\n    };\n  }\n})();\n"],"sourceRoot":"/source/"}